name: DevSecOps Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - security-checks
  pull_request:
    branches:
      - main

jobs:
  sast:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write  # Required for CodeQL

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run SAST with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: .github/codeql/codeql-results.sarif

      - name: Upload CodeQL SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .github/codeql/codeql-results.sarif
          category: 'Codeql_report'

      - name: Upload CodeQL Report
        uses: actions/upload-artifact@v4
        with:
          name: CodeQL-report
          path: .github/codeql/codeql-results.sarif

#code-linting
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: eslint instllation
        run: npm install eslint --save-dev

      - name: Run Linter
        run: |
          npx eslint . --format json -o eslint-results.json || true 

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-results.json



# # Dependency Scanning with OSV Scanner
# # Step: Install Trivy
      - name: Install Trivy
        run: |
          sudo apt-get install wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          
      # Step: Run Trivy Dependency Scan
      - name: Run Trivy Dependency Scan
        run: |
          trivy fs . --scanners vuln --vuln-type library --format json --output trivy-results.json || true

      # Step: Upload Trivy Reports
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path:  trivy-results.json




#Docker build and scanning
# Docker Build and Scanning with Trivy
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build -t nodejs-webapp:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'nodejs-webapp:${{ github.sha }}'
          format: json
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-report.json'

      - name: Upload Trivy Docker Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-docker-scan-report
          path: trivy-report.json

          # Secrets Detection in Github repos

      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml
          exit_code: 0