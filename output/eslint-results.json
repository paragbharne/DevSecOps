[{"filePath":"/home/runner/work/DevSecOps/DevSecOps/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/.prettierrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/App.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":12,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppThemeProvider } from './theme';\nimport { AppStore } from './store';\nimport { ErrorBoundary } from './components';\nimport Routes from './routes';\n\n/**\n * Root Application Component\n * @component MainApp\n */\nconst MainApp = () => {\n  return (\n    <ErrorBoundary name=\"App\">\n      <AppStore>\n        <AppThemeProvider>\n          <Routes />\n        </AppThemeProvider>\n      </AppStore>\n    </ErrorBoundary>\n  );\n};\n\nexport default MainApp;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppAlert/AppAlert.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":14,"column":12,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport AppAlert from './AppAlert';\nimport { capitalize, randomText } from '../../utils';\nimport { AlertProps } from '@mui/material';\n\nconst ComponentToTest = AppAlert;\n\n/**\n * Tests for <AppAlert/> component\n */\ndescribe('<AppAlert/> component', () => {\n  it('renders itself', () => {\n    const testId = randomText(8);\n    render(<ComponentToTest data-testid={testId} />);\n    const alert = screen.getByTestId(testId);\n    expect(alert).toBeDefined();\n    expect(alert).toHaveAttribute('role', 'alert');\n    expect(alert).toHaveClass('MuiAlert-root');\n  });\n\n  it('supports .severity property', () => {\n    const SEVERITIES = ['error', 'info', 'success', 'warning'];\n    for (const severity of SEVERITIES) {\n      const testId = randomText(8);\n      const severity = 'success';\n      render(\n        <ComponentToTest\n          data-testid={testId}\n          severity={severity}\n          variant=\"filled\" // Needed to verify exact MUI classes\n        />\n      );\n      const alert = screen.getByTestId(testId);\n      expect(alert).toBeDefined();\n      expect(alert).toHaveClass(`MuiAlert-filled${capitalize(severity)}`);\n    }\n  });\n\n  it('supports .variant property', () => {\n    const VARIANTS = ['filled', 'outlined', 'standard'];\n    for (const variant of VARIANTS) {\n      const testId = randomText(8);\n      render(\n        <ComponentToTest\n          data-testid={testId}\n          variant={variant as AlertProps['variant']}\n          severity=\"warning\" // Needed to verify exact MUI classes\n        />\n      );\n      const alert = screen.getByTestId(testId);\n      expect(alert).toBeDefined();\n      expect(alert).toHaveClass(`MuiAlert-${variant}Warning`);\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppAlert/AppAlert.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":9,"column":15,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent } from 'react';\nimport MuiAlert, { AlertProps as MuiAlertProps } from '@mui/material/Alert';\nimport { APP_ALERT_SEVERITY, APP_ALERT_VARIANT } from '../config';\n\n/**\n * Application styled Alert component\n * @component AppAlert\n */\nconst AppAlert: FunctionComponent<MuiAlertProps> = ({\n  severity = APP_ALERT_SEVERITY,\n  variant = APP_ALERT_VARIANT,\n  onClose,\n  ...restOfProps\n}) => {\n  return <MuiAlert severity={severity} sx={{ marginY: 1 }} variant={variant} onClose={onClose} {...restOfProps} />;\n};\n\nexport default AppAlert;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppAlert/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppButton/AppButton.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":11,"column":22,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent } from 'react';\nimport { render, screen, within } from '@testing-library/react';\nimport { AppThemeProvider, createEmotionCache } from '../../theme';\nimport AppButton, { AppButtonProps } from './AppButton';\nimport DefaultIcon from '@mui/icons-material/MoreHoriz';\nimport { randomText, capitalize } from '../../utils';\n\n/**\n * AppButton wrapped with Theme Provider\n */\nconst ComponentToTest: FunctionComponent<AppButtonProps> = (props) => (\n  <AppThemeProvider emotionCache={createEmotionCache()}>\n    <AppButton {...props} />\n  </AppThemeProvider>\n);\n\n/**\n * Test specific color for AppButton\n * @param {string} colorName - name of the color, one of ColorName type\n * @param {string} [expectedClassName] - optional value to be found in className (color \"true\" may use \"success\" class name)\n * @param {boolean} [ignoreClassName] - optional flag to ignore className (color \"inherit\" doesn't use any class name)\n */\nfunction testButtonColor(colorName: string, ignoreClassName = false, expectedClassName = colorName) {\n  it(`supports \"${colorName}\" color`, () => {\n    const testId = randomText(8);\n    let text = `${colorName} button`;\n    render(\n      <ComponentToTest\n        color={colorName}\n        data-testid={testId}\n        variant=\"contained\" // Required to get correct CSS class name\n      >\n        {text}\n      </ComponentToTest>\n    );\n\n    let button = screen.getByTestId(testId);\n    expect(button).toBeDefined();\n    // console.log('button.className:', button?.className);\n    if (!ignoreClassName) {\n      expect(button?.className?.includes('MuiButton-root')).toBeTruthy();\n      expect(button?.className?.includes('MuiButton-contained')).toBeTruthy();\n      expect(button?.className?.includes(`MuiButton-contained${capitalize(expectedClassName)}`)).toBeTruthy(); // Check for \"MuiButton-contained[Primary| Secondary |...]\" class\n    }\n  });\n}\n\ndescribe('<AppButton/> component', () => {\n  //   beforeEach(() => {});\n\n  it('renders itself', () => {\n    let text = 'sample button';\n    const testId = randomText(8);\n    render(<ComponentToTest data-testid={testId}>{text}</ComponentToTest>);\n    const button = screen.getByTestId(testId);\n    expect(button).toBeDefined();\n    expect(button).toHaveAttribute('role', 'button');\n    expect(button).toHaveAttribute('type', 'button'); // not \"submit\" or \"input\" by default\n  });\n\n  it('has .margin style by default', () => {\n    let text = 'button with default margin';\n    const testId = randomText(8);\n    render(<ComponentToTest data-testid={testId}>{text}</ComponentToTest>);\n    const button = screen.getByTestId(testId);\n    expect(button).toBeDefined();\n    expect(button).toHaveStyle('margin: 8px'); // Actually it is theme.spacing(1) value\n  });\n\n  it('supports .className property', () => {\n    let text = 'button with specific class';\n    let className = 'someClassName';\n    const testId = randomText(8);\n    render(\n      <ComponentToTest data-testid={testId} className={className}>\n        {text}\n      </ComponentToTest>\n    );\n    const button = screen.getByTestId(testId);\n    expect(button).toBeDefined();\n    expect(button).toHaveClass(className);\n  });\n\n  it('supports .label property', () => {\n    let text = 'button with label';\n    render(<ComponentToTest label={text} />);\n    let span = screen.getByText(text);\n    expect(span).toBeDefined();\n    let button = span.closest('button'); // parent <button> element\n    expect(button).toBeDefined();\n  });\n\n  it('supports .text property', () => {\n    let text = 'button with text';\n    render(<ComponentToTest text={text} />);\n    let span = screen.getByText(text);\n    expect(span).toBeDefined();\n    let button = span.closest('button'); // parent <button> element\n    expect(button).toBeDefined();\n  });\n\n  it('supports .startIcon property as <svg/>', () => {\n    let text = 'button with start icon';\n    render(<ComponentToTest text={text} startIcon={<DefaultIcon data-testid=\"startIcon\" />} />);\n    let button = screen.getByText(text);\n    let icon = within(button).getByTestId('startIcon');\n    expect(icon).toBeDefined();\n    let span = icon.closest('span');\n    expect(span).toHaveClass('MuiButton-startIcon');\n  });\n\n  it('supports .endIcon property', () => {\n    let text = 'button with end icon as <svg/>';\n    render(<ComponentToTest text={text} endIcon={<DefaultIcon data-testid=\"endIcon\" />} />);\n    let button = screen.getByText(text);\n    let icon = within(button).getByTestId('endIcon');\n    expect(icon).toBeDefined();\n    let span = icon.closest('span');\n    expect(span).toHaveClass('MuiButton-endIcon');\n  });\n\n  it('supports .startIcon property as string', () => {\n    let text = 'button with start icon';\n    render(<ComponentToTest text={text} startIcon=\"default\" />);\n    let button = screen.getByText(text);\n    let icon = within(button).getByTestId('MoreHorizIcon'); //Note: this is valid only when \"default\" icon is <MoreHorizIcon />\n    expect(icon).toBeDefined();\n    let span = icon.closest('span');\n    expect(span).toHaveClass('MuiButton-startIcon');\n  });\n\n  it('supports .endIcon property', () => {\n    let text = 'button with end icon as string';\n    render(<ComponentToTest text={text} endIcon=\"default\" />);\n    let button = screen.getByText(text);\n    let icon = within(button).getByTestId('MoreHorizIcon'); //Note: this is valid only when \"default\" icon is <MoreHorizIcon />\n    expect(icon).toBeDefined();\n    let span = icon.closest('span');\n    expect(span).toHaveClass('MuiButton-endIcon');\n  });\n\n  // MUI colors\n  testButtonColor('inherit');\n  testButtonColor('primary');\n  testButtonColor('secondary');\n  testButtonColor('error');\n  testButtonColor('warning');\n  testButtonColor('info');\n  testButtonColor('success');\n\n  // Non-MUI colors\n  testButtonColor('green', true);\n  testButtonColor('#FF00FF', true);\n  testButtonColor('rgba(255, 0, 0, 0.5)', true);\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppButton/AppButton.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":13,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ElementType, FunctionComponent, ReactNode, useMemo } from 'react';\nimport Button, { ButtonProps } from '@mui/material/Button';\nimport AppIcon from '../AppIcon';\nimport AppLink from '../AppLink';\nimport { APP_BUTTON_VARIANT } from '../config';\n\nconst MUI_BUTTON_COLORS = ['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning'];\n\nconst DEFAULT_SX_VALUES = {\n  margin: 1, // By default the AppButton has theme.spacing(1) margin on all sides\n};\n\nexport interface AppButtonProps extends Omit<ButtonProps, 'color' | 'endIcon' | 'startIcon'> {\n  color?: string; // Not only 'inherit' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning',\n  endIcon?: string | ReactNode;\n  label?: string; // Alternate to .text\n  text?: string; // Alternate to .label\n  startIcon?: string | ReactNode;\n  // Missing props\n  component?: ElementType; // Could be RouterLink, AppLink, <a>, etc.\n  to?: string; // Link prop\n  href?: string; // Link prop\n  openInNewTab?: boolean; // Link prop\n  underline?: 'none' | 'hover' | 'always'; // Link prop\n}\n\n/**\n * Application styled Material UI Button with Box around to specify margins using props\n * @component AppButton\n * @param {string} [color] - when passing MUI value ('primary', 'secondary', and so on), it is color of the button body, otherwise it is color of text and icons\n * @param {string} [children] - content to render, overrides .label and .text props\n * @param {string | ReactNode} [endIcon] - name of AppIcon or ReactNode to show after the button label\n * @param {string} [href] - external link URI\n * @param {string} [label] - text to render, alternate to .text\n * @param {boolean} [openInNewTab] - link will be opened in new tab when true\n * @param {string | ReactNode} [startIcon] - name of AppIcon or ReactNode to show before the button label\n * @param {Array<func| object| bool> | func | object} [sx] - additional CSS styles to apply to the button\n * @param {string} [text] - text to render, alternate to .label\n * @param {string} [to] - internal link URI\n * @param {string} [underline] - controls underline style when button used as link, one of 'none', 'hover', or 'always'\n * @param {string} [variant] - MUI variant of the button, one of 'text', 'outlined', or 'contained'\n */\nconst AppButton: FunctionComponent<AppButtonProps> = ({\n  children,\n  color: propColor = 'inherit',\n  component: propComponent,\n  endIcon,\n  label,\n  startIcon,\n  sx: propSx = DEFAULT_SX_VALUES,\n  text,\n  underline = 'none',\n  variant = APP_BUTTON_VARIANT,\n  ...restOfProps\n}) => {\n  const iconStart: ReactNode = useMemo(\n    () => (!startIcon ? undefined : typeof startIcon === 'string' ? <AppIcon icon={String(startIcon)} /> : startIcon),\n    [startIcon]\n  );\n\n  const iconEnd: ReactNode = useMemo(\n    () => (!endIcon ? undefined : typeof endIcon === 'string' ? <AppIcon icon={String(endIcon)} /> : endIcon),\n    [endIcon]\n  );\n\n  const isMuiColor = useMemo(() => MUI_BUTTON_COLORS.includes(propColor), [propColor]);\n\n  const componentToRender =\n    !propComponent && (restOfProps?.href || restOfProps?.to) ? AppLink : propComponent ?? Button;\n\n  const colorToRender = isMuiColor ? (propColor as ButtonProps['color']) : 'inherit';\n  const sxToRender = {\n    ...propSx,\n    ...(isMuiColor ? {} : { color: propColor }),\n  };\n\n  return (\n    <Button\n      component={componentToRender}\n      color={colorToRender}\n      endIcon={iconEnd}\n      startIcon={iconStart}\n      sx={sxToRender}\n      variant={variant}\n      {...{ ...restOfProps, underline }}\n    >\n      {children || label || text}\n    </Button>\n  );\n};\n\nexport default AppButton;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppButton/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppForm/AppForm.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, FormHTMLAttributes, FunctionComponent } from 'react';\nimport { Box, Grid } from '@mui/material';\n\ninterface Props extends FormHTMLAttributes<HTMLFormElement> {\n  children: ReactNode;\n}\n\n/**\n * Application styled Form container\n * @component AppForm\n */\nconst AppForm: FunctionComponent<Props> = ({ children, ...resOfProps }) => {\n  return (\n    <form {...resOfProps}>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <Box maxWidth=\"40rem\" width=\"100%\">\n          {children}\n        </Box>\n      </Grid>\n    </form>\n  );\n};\n\nexport default AppForm;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppForm/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppIcon/AppIcon.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":14,"column":12,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport AppIcon, { ICONS } from './AppIcon';\nimport { APP_ICON_SIZE } from '../config';\nimport { randomColor, randomText } from '../../utils';\n\nconst ComponentToTest = AppIcon;\n\n/**\n * Tests for <AppIcon/> component\n */\ndescribe('<AppIcon/> component', () => {\n  it('renders itself', () => {\n    const testId = randomText(8);\n    render(<ComponentToTest data-testid={testId} />);\n    const svg = screen.getByTestId(testId);\n    expect(svg).toBeDefined();\n    expect(svg).toHaveAttribute('data-icon', 'default');\n    expect(svg).toHaveAttribute('size', String(APP_ICON_SIZE)); // default size\n    expect(svg).toHaveAttribute('height', String(APP_ICON_SIZE)); // default size when .size is not set\n    expect(svg).toHaveAttribute('width', String(APP_ICON_SIZE)); // default size when .size is not se\n  });\n\n  it('supports .color property', () => {\n    const testId = randomText(8);\n    const color = randomColor(); // Note: 'rgb(255, 128, 0)' format is used by react-icons npm, so tests may fail\n    render(<ComponentToTest data-testid={testId} color={color} />);\n    const svg = screen.getByTestId(testId);\n    expect(svg).toHaveAttribute('data-icon', 'default');\n    // expect(svg).toHaveAttribute('color', color); // TODO: Looks like MUI Icons exclude .color property from <svg> rendering\n    expect(svg).toHaveStyle(`color: ${color}`);\n    expect(svg).toHaveAttribute('fill', 'currentColor'); // .fill must be 'currentColor' when .color property is set\n  });\n\n  it('supports .icon property', () => {\n    // Verify that all icons are supported\n    for (const icon of Object.keys(ICONS)) {\n      const testId = randomText(8);\n      render(<ComponentToTest data-testid={testId} icon={icon} />);\n      const svg = screen.getByTestId(testId);\n      expect(svg).toBeDefined();\n      expect(svg).toHaveAttribute('data-icon', icon.toLowerCase());\n    }\n  });\n\n  it('supports .size property', () => {\n    const testId = randomText(8);\n    const size = Math.floor(Math.random() * 128) + 1;\n    render(<ComponentToTest data-testid={testId} size={size} />);\n    const svg = screen.getByTestId(testId);\n    expect(svg).toHaveAttribute('size', String(size));\n    expect(svg).toHaveAttribute('height', String(size));\n    expect(svg).toHaveAttribute('width', String(size));\n  });\n\n  it('supports .title property', () => {\n    const testId = randomText(8);\n    const title = randomText(16);\n    render(<ComponentToTest data-testid={testId} title={title} />);\n    const svg = screen.getByTestId(testId);\n    expect(svg).toBeDefined();\n    expect(svg).toHaveAttribute('title', title);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppIcon/AppIcon.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":32,"column":19,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ComponentType, FunctionComponent, SVGAttributes } from 'react';\nimport { APP_ICON_SIZE } from '../config';\n// SVG assets\nimport LogoIcon from './icons/LogoIcon';\n// Material Icons\nimport DefaultIcon from '@mui/icons-material/MoreHoriz';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DayNightIcon from '@mui/icons-material/Brightness4';\nimport NightIcon from '@mui/icons-material/Brightness3';\nimport DayIcon from '@mui/icons-material/Brightness5';\nimport SearchIcon from '@mui/icons-material/Search';\nimport InfoIcon from '@mui/icons-material/Info';\nimport HomeIcon from '@mui/icons-material/Home';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport PersonIcon from '@mui/icons-material/Person';\nimport ExitToAppIcon from '@mui/icons-material/ExitToApp';\nimport NotificationsIcon from '@mui/icons-material/NotificationsOutlined';\n\n/**\n * How to use:\n * 1. Import all required MUI or other SVG icons into this file.\n * 2. Add icons with \"unique lowercase names\" into ICONS object.\n * 3. Use icons everywhere in the App by their names in <AppIcon icon=\"xxx\" /> component\n * Important: properties of ICONS object MUST be lowercase!\n * Note: You can use camelCase or UPPERCASE in the <AppIcon icon=\"someIconByName\" /> component\n */\nexport const ICONS: Record<string, ComponentType> = {\n  default: DefaultIcon,\n  logo: LogoIcon,\n  close: CloseIcon,\n  menu: MenuIcon,\n  settings: SettingsIcon,\n  visibilityon: VisibilityIcon,\n  visibilityoff: VisibilityOffIcon,\n  daynight: DayNightIcon,\n  night: NightIcon,\n  day: DayIcon,\n  search: SearchIcon,\n  info: InfoIcon,\n  home: HomeIcon,\n  account: AccountCircle,\n  signup: PersonAddIcon,\n  login: PersonIcon,\n  logout: ExitToAppIcon,\n  notifications: NotificationsIcon,\n};\n\nexport interface AppIconProps extends SVGAttributes<SVGElement> {\n  color?: string;\n  icon?: string;\n  size?: string | number;\n  title?: string;\n}\n\n/**\n * Renders SVG icon by given Icon name\n * @component AppIcon\n * @param {string} [color] - color of the icon as a CSS color value\n * @param {string} [icon] - name of the Icon to render\n * @param {string} [title] - title/hint to show when the cursor hovers the icon\n * @param {string | number} [size] - size of the icon, default is ICON_SIZE\n */\nconst AppIcon: FunctionComponent<AppIconProps> = ({\n  color,\n  icon = 'default',\n  size = APP_ICON_SIZE,\n  style,\n  ...restOfProps\n}) => {\n  const iconName = (icon || 'default').trim().toLowerCase();\n\n  let ComponentToRender = ICONS[iconName];\n  if (!ComponentToRender) {\n    console.warn(`AppIcon: icon \"${iconName}\" is not found!`);\n    ComponentToRender = DefaultIcon;\n  }\n\n  const propsToRender = {\n    height: size,\n    color,\n    fill: color && 'currentColor',\n    size,\n    style: { ...style, color },\n    width: size,\n    ...restOfProps,\n  };\n\n  return <ComponentToRender data-icon={iconName} {...propsToRender} />;\n};\n\nexport default AppIcon;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppIcon/icons/LogoIcon.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":4,"column":15,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent } from 'react';\nimport { AppIconProps } from '../AppIcon';\n\nconst LogoIcon: FunctionComponent<AppIconProps> = (props) => {\n  return (\n    <svg\n      version=\"1.0\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      // xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 48 48\"\n      enableBackground=\"new 0 0 48 48\"\n      // xml:space=\"preserve\"\n      {...props}\n    >\n      <circle fill=\"#3F51B5\" cx=\"18\" cy=\"18\" r=\"15\" />\n      <path\n        fill=\"#FFF59D\"\n        d=\"M20.3,16v1.7h-3.8v1.4h3.8v1.7h-3.8c0,0.6,0.1,1.2,0.3,1.6c0.2,0.4,0.4,0.8,0.7,1c0.3,0.3,0.7,0.4,1.1,0.6\n\tc0.4,0.1,0.9,0.2,1.4,0.2c0.4,0,0.7,0,1.1-0.1c0.4-0.1,0.7-0.1,1-0.3l0.4,2.7c-0.4,0.1-0.9,0.2-1.4,0.2c-0.5,0.1-1,0.1-1.5,0.1\n\tc-0.9,0-1.8-0.1-2.6-0.4c-0.8-0.2-1.5-0.6-2-1.1c-0.6-0.5-1-1.1-1.4-1.9c-0.3-0.7-0.5-1.6-0.5-2.6h-1.9v-1.7h1.9v-1.4h-1.9V16h1.9\n\tc0.1-1,0.3-1.8,0.6-2.6c0.4-0.7,0.8-1.4,1.4-1.9c0.6-0.5,1.3-0.9,2.1-1.1c0.8-0.3,1.7-0.4,2.6-0.4c0.4,0,0.9,0,1.3,0.1\n\tc0.4,0.1,0.9,0.1,1.3,0.3l-0.4,2.7c-0.3-0.1-0.6-0.2-1-0.3c-0.4-0.1-0.7-0.1-1.1-0.1c-0.5,0-1,0.1-1.4,0.2c-0.4,0.1-0.8,0.3-1,0.6\n\tc-0.3,0.3-0.5,0.6-0.7,1s-0.3,0.9-0.3,1.5H20.3z\"\n      />\n      <circle fill=\"#4CAF50\" cx=\"30\" cy=\"30\" r=\"15\" />\n      <path\n        fill=\"#FFFFFF\"\n        d=\"M28.4,27c0.1,0.2,0.2,0.4,0.4,0.6c0.2,0.2,0.4,0.4,0.7,0.5c0.3,0.2,0.7,0.3,1.1,0.5c0.7,0.3,1.4,0.6,2,0.9\n\tc0.6,0.3,1.1,0.7,1.5,1.1c0.4,0.4,0.8,0.9,1,1.4c0.2,0.5,0.4,1.2,0.4,1.9c0,0.7-0.1,1.3-0.3,1.8c-0.2,0.5-0.5,1-0.9,1.4\n\ts-0.9,0.7-1.4,0.9c-0.6,0.2-1.2,0.4-1.8,0.5v2.2h-1.8v-2.2c-0.6-0.1-1.2-0.2-1.8-0.4s-1.1-0.5-1.5-1c-0.5-0.4-0.8-1-1.1-1.6\n\tc-0.3-0.6-0.4-1.4-0.4-2.3h3.3c0,0.5,0.1,1,0.2,1.3c0.1,0.4,0.3,0.6,0.6,0.9c0.2,0.2,0.5,0.4,0.8,0.5c0.3,0.1,0.6,0.1,0.9,0.1\n\tc0.4,0,0.7,0,0.9-0.1c0.3-0.1,0.5-0.2,0.7-0.4c0.2-0.2,0.3-0.4,0.4-0.6c0.1-0.2,0.1-0.5,0.1-0.8c0-0.3,0-0.6-0.1-0.8\n\tc-0.1-0.2-0.2-0.5-0.4-0.7s-0.4-0.4-0.7-0.5c-0.3-0.2-0.7-0.3-1.1-0.5c-0.7-0.3-1.4-0.6-2-0.9c-0.6-0.3-1.1-0.7-1.5-1.1\n\tc-0.4-0.4-0.8-0.9-1-1.4c-0.2-0.5-0.4-1.2-0.4-1.9c0-0.6,0.1-1.2,0.3-1.7c0.2-0.5,0.5-1,0.9-1.4c0.4-0.4,0.9-0.7,1.4-1\n\tc0.5-0.2,1.2-0.4,1.8-0.5v-2.4h1.8v2.4c0.6,0.1,1.2,0.3,1.8,0.6c0.5,0.3,1,0.6,1.3,1.1c0.4,0.4,0.7,1,0.9,1.6c0.2,0.6,0.3,1.3,0.3,2\n\th-3.3c0-0.9-0.2-1.6-0.6-2c-0.4-0.4-0.9-0.7-1.5-0.7c-0.3,0-0.6,0.1-0.9,0.2c-0.2,0.1-0.4,0.2-0.6,0.4c-0.2,0.2-0.3,0.4-0.3,0.6\n\tc-0.1,0.2-0.1,0.5-0.1,0.8C28.3,26.5,28.4,26.8,28.4,27z\"\n      />\n    </svg>\n  );\n};\n\nexport default LogoIcon;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppIcon/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppIconButton/AppIconButton.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":9,"column":32,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { fireEvent, render, screen } from '@testing-library/react';\nimport AppIconButton, { MUI_ICON_BUTTON_COLORS } from './AppIconButton';\nimport { APP_ICON_SIZE } from '../config';\nimport { ObjectPropByName, capitalize, randomColor, randomText } from '../../utils';\nimport { ICONS } from '../AppIcon/AppIcon';\n\nconst ComponentToTest = AppIconButton;\n\nfunction randomPropertyName(obj: object): string {\n  const objectProperties = Object.keys(obj);\n  const propertyName = objectProperties[Math.floor(Math.random() * objectProperties.length)];\n  return propertyName;\n}\n\nfunction randomPropertyValue(obj: object): unknown {\n  const propertyName = randomPropertyName(obj);\n  return (obj as ObjectPropByName)[propertyName];\n}\n\n/**\n * Tests for <AppIconButton/> component\n */\ndescribe('<AppIconButton/> component', () => {\n  it('renders itself', () => {\n    const testId = randomText(8);\n    render(<ComponentToTest data-testid={testId} />);\n\n    // Button\n    const button = screen.getByTestId(testId);\n    expect(button).toBeDefined();\n    expect(button).toHaveAttribute('role', 'button');\n    expect(button).toHaveAttribute('type', 'button');\n\n    // Icon\n    const svg = button.querySelector('svg');\n    expect(svg).toBeDefined();\n    expect(svg).toHaveAttribute('data-icon', 'default'); // default icon\n    expect(svg).toHaveAttribute('size', String(APP_ICON_SIZE)); // default size\n    expect(svg).toHaveAttribute('height', String(APP_ICON_SIZE)); // default size when .size is not set\n    expect(svg).toHaveAttribute('width', String(APP_ICON_SIZE)); // default size when .size is not se\n  });\n\n  it('supports .color property', () => {\n    for (const color of [...MUI_ICON_BUTTON_COLORS, randomColor(), randomColor(), randomColor()]) {\n      const testId = randomText(8);\n      const icon = randomPropertyName(ICONS) as string;\n      render(<ComponentToTest data-testid={testId} color={color} icon={icon} />);\n\n      // Button\n      const button = screen.getByTestId(testId);\n      expect(button).toBeDefined();\n\n      if (color == 'default') {\n        return; // Nothing to test for default color\n      }\n\n      if (MUI_ICON_BUTTON_COLORS.includes(color)) {\n        expect(button).toHaveClass(`MuiIconButton-color${capitalize(color)}`);\n      } else {\n        expect(button).toHaveStyle({ color: color });\n      }\n    }\n  });\n\n  it('supports .disable property', () => {\n    const testId = randomText(8);\n    const title = randomText(16);\n    render(<ComponentToTest data-testid={testId} disabled />);\n\n    // Button\n    const button = screen.getByTestId(testId);\n    expect(button).toBeDefined();\n    expect(button).toHaveAttribute('aria-disabled', 'true');\n    expect(button).toHaveClass('Mui-disabled');\n  });\n\n  it('supports .icon property', () => {\n    // Verify that all icons are supported\n    for (const icon of Object.keys(ICONS)) {\n      const testId = randomText(8);\n      render(<ComponentToTest data-testid={testId} icon={icon} />);\n\n      // Button\n      const button = screen.getByTestId(testId);\n      expect(button).toBeDefined();\n\n      // Icon\n      const svg = button.querySelector('svg');\n      expect(button).toBeDefined();\n      expect(svg).toHaveAttribute('data-icon', icon.toLowerCase());\n    }\n  });\n\n  it('supports .size property', () => {\n    const sizes = ['small', 'medium', 'large'] as const; //  as IconButtonProps['size'][];\n    for (const size of sizes) {\n      const testId = randomText(8);\n      render(<ComponentToTest data-testid={testId} size={size} />);\n\n      // Button\n      const button = screen.getByTestId(testId);\n      expect(button).toBeDefined();\n      expect(button).toHaveClass(`MuiIconButton-size${capitalize(size)}`); // MuiIconButton-sizeSmall | MuiIconButton-sizeMedium | MuiIconButton-sizeLarge\n    }\n  });\n\n  it('supports .title property', async () => {\n    const testId = randomText(8);\n    const title = randomText(16);\n    render(<ComponentToTest data-testid={testId} title={title} />);\n\n    // Button\n    const button = screen.getByTestId(testId);\n    expect(button).toBeDefined();\n    expect(button).toHaveAttribute('aria-label', title);\n\n    // Emulate mouseover event to show tooltip\n    await fireEvent(button, new MouseEvent('mouseover', { bubbles: true }));\n\n    // Tooltip is rendered in a separate div, so we need to find it by role\n    const tooltip = await screen.findByRole('tooltip');\n    expect(tooltip).toBeDefined();\n    expect(tooltip).toHaveTextContent(title);\n    expect(tooltip).toHaveClass('MuiTooltip-popper');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppIconButton/AppIconButton.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":18,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ElementType, FunctionComponent, useMemo } from 'react';\nimport { Tooltip, IconButton, IconButtonProps } from '@mui/material';\nimport AppIcon from '../AppIcon';\nimport AppLink from '../AppLink';\nimport { alpha } from '@mui/material';\n\nexport const MUI_ICON_BUTTON_COLORS = [\n  'inherit',\n  'default',\n  'primary',\n  'secondary',\n  'success',\n  'error',\n  'info',\n  'warning',\n];\n\ninterface Props extends Omit<IconButtonProps, 'color'> {\n  color?: string; // Not only 'inherit' | 'default' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning',\n  icon?: string;\n  // Missing props\n  component?: ElementType; // Could be RouterLink, AppLink, <a>, etc.\n  to?: string; // Link prop\n  href?: string; // Link prop\n  openInNewTab?: boolean; // Link prop\n}\n\n/**\n * Renders MUI IconButton with SVG image by given Icon name\n * @component AppIconButton\n * @param {string} [color] - color of background and hover effect. Non MUI values is also accepted.\n * @param {boolean} [disabled] - the IconButton is not active when true, also the Tooltip is not rendered.\n * @param {string} [href] - external link URI\n * @param {string} [icon] - name of Icon to render inside the IconButton\n * @param {boolean} [openInNewTab] - link will be opened in new tab when true\n * @param {string} [size] - size of the button: 'small', 'medium' or 'large'\n * @param {Array<func| object| bool> | func | object} [sx] - additional CSS styles to apply to the button\n * @param {string} [title] - when set, the IconButton is rendered inside Tooltip with this text\n * @param {string} [to] - internal link URI\n */\nconst AppIconButton: FunctionComponent<Props> = ({\n  color = 'default',\n  component,\n  children,\n  disabled,\n  icon,\n  sx,\n  title,\n  ...restOfProps\n}) => {\n  const componentToRender = !component && (restOfProps?.href || restOfProps?.to) ? AppLink : component ?? IconButton;\n\n  const isMuiColor = useMemo(() => MUI_ICON_BUTTON_COLORS.includes(color), [color]);\n\n  const IconButtonToRender = useMemo(() => {\n    const colorToRender = isMuiColor ? (color as IconButtonProps['color']) : 'default';\n    const sxToRender = {\n      ...sx,\n      ...(isMuiColor\n        ? {}\n        : {\n            color: color,\n            ':hover': {\n              backgroundColor: alpha(color, 0.04),\n            },\n          }),\n    };\n    return (\n      <IconButton\n        component={componentToRender}\n        color={colorToRender}\n        disabled={disabled}\n        sx={sxToRender}\n        {...restOfProps}\n      >\n        <AppIcon icon={icon} />\n        {children}\n      </IconButton>\n    );\n  }, [color, componentToRender, children, disabled, icon, isMuiColor, sx, restOfProps]);\n\n  // When title is set, wrap the IconButton with Tooltip.\n  // Note: when IconButton is disabled the Tooltip is not working, so we don't need it\n  return title && !disabled ? <Tooltip title={title}>{IconButtonToRender}</Tooltip> : IconButtonToRender;\n};\n\nexport default AppIconButton;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppIconButton/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppLink/AppLink.test.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":10,"column":22,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BrowserRouter } from 'react-router-dom';\nimport { FunctionComponent } from 'react';\nimport { render, screen } from '@testing-library/react';\nimport AppLink, { AppLinkProps } from './';\nimport { randomColor } from '../../utils';\n\n/**\n * AppLink wrapped with BrowserRouter\n */\nconst ComponentToTest: FunctionComponent<AppLinkProps> = (props) => (\n  <BrowserRouter>\n    <AppLink {...props} />\n  </BrowserRouter>\n);\n\n/**\n * Tests for <AppLink/> component\n */\ndescribe('<AppLink/> component', () => {\n  it('renders itself', () => {\n    const text = 'sample text';\n    const url = 'https://example.com/';\n    render(<ComponentToTest href={url}>{text}</ComponentToTest>);\n    const link = screen.getByText(text);\n    expect(link).toBeDefined();\n    expect(link).toHaveAttribute('href', url);\n    expect(link).toHaveTextContent(text);\n  });\n\n  it('supports external link', () => {\n    const text = 'external link';\n    const url = 'https://example.com/';\n    render(<ComponentToTest href={url}>{text}</ComponentToTest>);\n    const link = screen.getByText(text);\n    expect(link).toBeDefined();\n    expect(link).toHaveAttribute('href', url);\n    expect(link).toHaveTextContent(text);\n    expect(link).toHaveAttribute('target', '_blank'); // Open external links in new Tab by default\n    expect(link).toHaveAttribute('rel'); // For links opened in new Tab rel=\"noreferrer noopener\" is required\n    const rel = (link as any)?.rel;\n    expect(rel.includes('noreferrer')).toBeTruthy(); // ref=\"noreferrer\" check\n    expect(rel.includes('noopener')).toBeTruthy(); // rel=\"noreferrer check\n  });\n\n  it('supports internal link', () => {\n    const text = 'internal link';\n    const url = '/internal-link';\n    render(<ComponentToTest to={url}>{text}</ComponentToTest>);\n    const link = screen.getByText(text);\n    expect(link).toBeDefined();\n    expect(link).toHaveAttribute('href', url);\n    expect(link).toHaveTextContent(text);\n    expect(link).not.toHaveAttribute('target');\n    expect(link).not.toHaveAttribute('rel');\n  });\n\n  it('supports .openInNewTab property', () => {\n    // External link with openInNewTab={false}\n    let text = 'external link in same tab';\n    let url = 'https://example.com/';\n    render(\n      <ComponentToTest href={url} openInNewTab={false}>\n        {text}\n      </ComponentToTest>\n    );\n    let link = screen.getByText(text);\n    expect(link).toBeDefined();\n    expect(link).toHaveAttribute('href', url);\n    expect(link).toHaveTextContent(text);\n    expect(link).not.toHaveAttribute('target');\n    expect(link).not.toHaveAttribute('rel');\n\n    // Internal link with openInNewTab={true}\n    text = 'internal link in new tab';\n    url = '/internal-link-in-new-tab';\n    render(\n      <ComponentToTest to={url} openInNewTab>\n        {text}\n      </ComponentToTest>\n    );\n    link = screen.getByText(text);\n    expect(link).toBeDefined();\n    expect(link).toHaveAttribute('href', url);\n    expect(link).toHaveTextContent(text);\n    expect(link).toHaveAttribute('target', '_blank'); // Open links in new Tab\n    expect(link).toHaveAttribute('rel'); // For links opened in new Tab rel=\"noreferrer noopener\" is required\n    const rel = (link as any)?.rel;\n    expect(rel.includes('noreferrer')).toBeTruthy(); // ref=\"noreferrer\" check\n    expect(rel.includes('noopener')).toBeTruthy(); // rel=\"noreferrer check\n  });\n\n  it('supports .className property', () => {\n    let text = 'internal link with specific class';\n    let url = '/internal-link-with-class';\n    let className = 'someClassName';\n    render(\n      <ComponentToTest to={url} className={className}>\n        {text}\n      </ComponentToTest>\n    );\n    let link = screen.getByText(text);\n    expect(link).toBeDefined();\n    expect(link).toHaveClass(className);\n  });\n\n  it('supports .color property', () => {\n    // Check several times with random colors\n    for (let i = 1; i < 5; i++) {\n      let text = `link #${i} with .color property`;\n      let url = '/internal-link-with-color';\n      let color = randomColor();\n      render(\n        <ComponentToTest to={url} color={color}>\n          {text}\n        </ComponentToTest>\n      );\n      let link = screen.getByText(text);\n      expect(link).toBeDefined();\n      expect(link).toHaveStyle(`color: ${color}`);\n    }\n  });\n\n  it('supports .underline property', () => {\n    // Enumerate all possible values\n    ['hover', 'always', 'none'].forEach((underline) => {\n      let text = `link with .underline == \"${underline}\"`;\n      let url = '/internal-link-with-underline';\n      render(\n        <ComponentToTest to={url} underline={underline as any}>\n          {text}\n        </ComponentToTest>\n      );\n      let link = screen.getByText(text);\n      expect(link).toBeDefined();\n      underline === 'none'\n        ? expect(link).toHaveStyle('text-decoration: none')\n        : expect(link).toHaveStyle('text-decoration: underline');\n      // TODO: make \"hover\" test with \"mouse moving\"\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppLink/AppLink.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":11,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { forwardRef, ReactNode } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport MuiLink, { LinkProps as MuiLinkProps } from '@mui/material/Link';\nimport { APP_LINK_COLOR, APP_LINK_UNDERLINE } from '../config';\n\nexport const EXTERNAL_LINK_PROPS = {\n  target: '_blank',\n  rel: 'noopener noreferrer',\n};\n\nexport interface AppLinkProps extends MuiLinkProps {\n  children: ReactNode;\n  to?: string;\n  href?: string;\n  openInNewTab?: boolean;\n}\n\n/**\n * Restyled Link for navigation in the App, support internal links by \"to\" prop and external links by \"href\" prop\n * @component AppLink\n * @param {object|function} children - content to wrap with <a> tag\n * @param {string} [to] - internal link URI\n * @param {string} [href] - external link URI\n * @param {boolean} [openInNewTab] - link will be opened in new tab when true\n */\nconst AppLink = forwardRef<any, AppLinkProps>(\n  (\n    {\n      children,\n      color = APP_LINK_COLOR,\n      underline = APP_LINK_UNDERLINE,\n      to = '',\n      href,\n      openInNewTab = Boolean(href), // Open external links in new Tab by default\n      ...restOfProps\n    },\n    ref\n  ) => {\n    const propsToRender = {\n      color,\n      underline,\n      ...(openInNewTab && EXTERNAL_LINK_PROPS),\n      ...restOfProps,\n    };\n    return href ? (\n      <MuiLink ref={ref} href={href} {...propsToRender}>\n        {children}\n      </MuiLink>\n    ) : (\n      <MuiLink ref={ref} component={RouterLink} to={to as string} {...propsToRender}>\n        {children}\n      </MuiLink>\n    );\n  }\n);\n\nexport default AppLink;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppLink/index.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token type","line":3,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AppLink, { AppLinkProps } from './AppLink';\n\nexport type { AppLinkProps };\nexport { AppLink as default, AppLink };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppLoading/AppLoading.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":5,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent } from 'react';\nimport { CircularProgress, CircularProgressProps, LinearProgress, Stack, StackProps } from '@mui/material';\nimport { APP_LOADING_COLOR, APP_LOADING_SIZE, APP_LOADING_TYPE } from '../config';\n\ninterface Props extends StackProps {\n  color?: CircularProgressProps['color'];\n  size?: number | string;\n  type?: 'circular' | 'linear';\n  value?: number;\n}\n\n/**\n * Renders MI circular progress centered inside Stack\n * @component AppLoading\n * @prop {string} [size] - size of the progress component. Numbers means pixels, string can be '2.5rem'\n */\nconst AppLoading: FunctionComponent<Props> = ({\n  color = APP_LOADING_COLOR,\n  size = APP_LOADING_SIZE,\n  type = APP_LOADING_TYPE,\n  value,\n  ...restOfProps\n}) => {\n  const alignItems = type === 'linear' ? undefined : 'center';\n  return (\n    <Stack my={2} alignItems={alignItems} {...restOfProps}>\n      {type === 'linear' ? (\n        <LinearProgress color={color} value={value} />\n      ) : (\n        <CircularProgress color={color} size={size} value={value} />\n      )}\n    </Stack>\n  );\n};\n\nexport default AppLoading;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppLoading/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppView/AppView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":9,"column":14,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, PropsWithChildren } from 'react';\nimport { Stack, StackProps, useMediaQuery, useTheme } from '@mui/material';\nimport { CONTENT_MAX_WIDTH, CONTENT_MIN_WIDTH } from '../config';\n\n/**\n * Renders View container composition with limited width\n * @component AppView\n */\nconst AppView: FunctionComponent<PropsWithChildren<StackProps>> = ({ children, minWidth, ...restOfProps }) => {\n  const theme = useTheme();\n  const onSmallScreens = useMediaQuery(theme.breakpoints.down('sm'));\n  const minWidthToRender = onSmallScreens ? '100%' : minWidth ?? CONTENT_MIN_WIDTH;\n\n  return (\n    <Stack alignSelf=\"center\" gap={2} maxWidth={CONTENT_MAX_WIDTH} minWidth={minWidthToRender} {...restOfProps}>\n      {children}\n    </Stack>\n  );\n};\n\nexport default AppView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/AppView/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/ErrorBoundary.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":3,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  name: string;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\n/**\n * Error boundary wrapper to save Application parts from falling\n * @component ErrorBoundary\n * @param {string} [props.name] - name of the wrapped segment, \"Error Boundary\" by default\n */\nclass ErrorBoundary extends Component<Props, State> {\n  static defaultProps = {\n    name: 'Error Boundary',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    // The next render will show the Error UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Save information to help render Error UI\n    this.setState({ error, errorInfo });\n    // TODO: Add log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Error UI rendering\n      return (\n        <div>\n          <h2>{this.props.name} - Something went wrong</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state?.error?.toString()}\n            <br />\n            {this.state?.errorInfo?.componentStack}\n          </details>\n        </div>\n      );\n    }\n\n    // Normal UI rendering\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/UserInfo/UserInfo.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Avatar, Stack, Typography } from '@mui/material';\nimport AppLink from '../AppLink';\n\ninterface UserInfoProps {\n  className?: string;\n  showAvatar?: boolean;\n  user?: any;\n}\n\n/**\n * Renders User info with Avatar\n * @component UserInfo\n * @param {string} [className] - optional className for <div> tag\n * @param {boolean} [showAvatar] - user's avatar picture is shown when true\n * @param {object} [user] - logged user data {name, email, avatar...}\n */\nconst UserInfo = ({ className, showAvatar = false, user, ...restOfProps }: UserInfoProps) => {\n  const fullName = user?.name || [user?.nameFirst || '', user?.nameLast || ''].join(' ').trim();\n  const srcAvatar = user?.avatar ? user?.avatar : undefined;\n  const userPhoneOrEmail = user?.phone || (user?.email as string);\n\n  return (\n    <Stack alignItems=\"center\" minHeight=\"fit-content\" marginBottom={2} {...restOfProps}>\n      {showAvatar ? (\n        <AppLink to=\"/user\" underline=\"none\">\n          <Avatar\n            sx={{\n              width: 64,\n              height: 64,\n              fontSize: '3rem',\n            }}\n            alt={fullName || 'User Avatar'}\n            src={srcAvatar}\n          />\n        </AppLink>\n      ) : null}\n      <Typography sx={{ mt: 1 }} variant=\"h6\">\n        {fullName || 'Current User'}\n      </Typography>\n      <Typography variant=\"body2\">{userPhoneOrEmail || 'Loading...'}</Typography>\n    </Stack>\n  );\n};\n\nexport default UserInfo;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/UserInfo/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/dialogs/CommonDialog.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":8,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, ReactNode, SyntheticEvent, useCallback } from 'react';\nimport { Dialog, DialogActions, DialogContent, DialogProps } from '@mui/material';\nimport { AppButton } from '..';\nimport { AppDialogTitle } from './components';\nimport { ColorName } from '../../utils/style';\nimport { useDialogMinWidth } from './utils';\n\ninterface Props extends DialogProps {\n  data?: unknown;\n  title?: string;\n  text?: string;\n  body?: ReactNode;\n  hideCancelButton?: boolean;\n  confirmButtonText?: string;\n  confirmButtonColor?: ColorName;\n  onConfirm?: (data: unknown) => void;\n  onClose?: (event: SyntheticEvent) => void;\n}\n\n/**\n * Shows generic \"Common\" dialog\n * @component CommonDialog\n * @param {function} props.onConfirm - event for Confirm button, called as onConfirm(data)\n * @param {function} props.onClose - event for Close and Cancel buttons and the backdrop\n */\nconst CommonDialog: FunctionComponent<Props> = ({\n  open = false, // Don't show dialog by default\n  data, // optional data passed to onConfirm callback\n  title = 'Missing title...',\n  text = 'Text is missing...',\n  body, // JSX to render instead of .text\n  hideCancelButton = false,\n  confirmButtonText = 'Confirm',\n  confirmButtonColor = 'primary',\n  onConfirm,\n  onClose,\n  ...restOfProps\n}) => {\n  const paperMinWidth = useDialogMinWidth();\n\n  const handleOnConfirm = useCallback(() => {\n    if (onConfirm && typeof onConfirm === 'function') {\n      onConfirm(data);\n    }\n  }, [data, onConfirm]);\n\n  return (\n    <Dialog\n      aria-labelledby=\"form-dialog-title\"\n      open={open}\n      PaperProps={{\n        sx: {\n          minWidth: paperMinWidth,\n        },\n      }}\n      onClose={onClose}\n      {...restOfProps}\n    >\n      <AppDialogTitle id=\"form-dialog-title\" onClose={onClose}>\n        {title}\n      </AppDialogTitle>\n      <DialogContent sx={{ py: 1 }}>{body || text}</DialogContent>\n      <DialogActions sx={{ px: 3 }}>\n        {!hideCancelButton && <AppButton onClick={onClose}>Cancel</AppButton>}\n        <AppButton onClick={handleOnConfirm} color={confirmButtonColor} sx={{ mr: 0 }}>\n          {confirmButtonText}\n        </AppButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CommonDialog;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/dialogs/CompositionDialog.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":6,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, ReactNode, SyntheticEvent } from 'react';\nimport { Box, Dialog, DialogActions, DialogContent, DialogProps } from '@mui/material';\nimport { AppDialogTitle } from './components';\nimport { useDialogMinWidth } from './utils';\n\ninterface Props extends DialogProps {\n  title?: string;\n  content?: ReactNode;\n  actions?: ReactNode;\n  onClose?: (event: SyntheticEvent) => void;\n}\n\n/**\n * Makes composition of Content and Actions inside the Dialog.\n * @component CompositionDialog\n */\nconst CompositionDialog: FunctionComponent<Props> = ({\n  actions,\n  open = false, // Don't show dialog by default\n  children = null,\n  content = null,\n  title = 'Missing title...',\n  onClose,\n  ...restOfProps\n}) => {\n  const paperMinWidth = useDialogMinWidth();\n\n  return (\n    <Dialog\n      aria-labelledby=\"form-dialog-title\"\n      open={open}\n      PaperProps={{\n        sx: {\n          minWidth: paperMinWidth,\n        },\n      }}\n      onClose={onClose}\n      {...restOfProps}\n    >\n      <AppDialogTitle id=\"form-dialog-title\" onClose={onClose}>\n        {title}\n      </AppDialogTitle>\n      <DialogContent sx={{ py: 1 }}>\n        {/* Box is temporary fix for https://github.com/mui-org/material-ui/issues/27851 */}\n        {/* TODO: verify do we still need this fix */}\n        <Box pt={1}>\n          {content}\n          {children}\n        </Box>\n      </DialogContent>\n      <DialogActions sx={{ px: 3 }}>{actions}</DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CompositionDialog;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/dialogs/components/AppDialogTitle.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":5,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, SyntheticEvent } from 'react';\nimport { DialogTitle, DialogTitleProps, Typography, Stack, useTheme } from '@mui/material';\nimport { AppIconButton } from '../../';\n\ninterface Props extends DialogTitleProps {\n  onClose?: (event: SyntheticEvent) => void;\n}\n\n/**\n * Renders Material UI Dialog Title with optional (x) button to close the dialog\n * @param {function} [onClose] - when set the (x) button added to Dialog Title and event called on button click\n */\nconst AppDialogTitle: FunctionComponent<Props> = ({ children, onClose, ...props }) => {\n  const theme = useTheme();\n  return (\n    <DialogTitle {...props}>\n      <Stack direction=\"row\" maxWidth={`calc(100% - ${theme.spacing(4)})`}>\n        <Typography\n          sx={{\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n          }}\n          variant=\"h6\"\n        >\n          {children}\n        </Typography>\n      </Stack>\n      {Boolean(onClose) ? (\n        <AppIconButton\n          size=\"large\"\n          icon=\"close\"\n          title=\"Close\"\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: theme.spacing(0.5),\n            top: theme.spacing(0.5),\n          }}\n        />\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nexport default AppDialogTitle;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/dialogs/components/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/dialogs/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/dialogs/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/components/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/hooks/auth.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token CurrentUser","line":5,"column":6,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppStore } from '../store';\n\ntype CurrentUser = {\n  id?: string;\n  email?: string;\n  phone?: string;\n  avatar?: string;\n  name?: string;\n};\n\n/**\n * Hook to get currently logged user\n * @returns {object | undefined} user data as object or undefined if user is not logged in\n */\nexport function useCurrentUser(): CurrentUser | undefined {\n  const [state] = useAppStore();\n  return state.currentUser;\n}\n\n/**\n * Hook to detect is current user authenticated or not\n * @returns {boolean} true if user is authenticated, false otherwise\n */\nexport function useIsAuthenticated() {\n  const [state] = useAppStore();\n  let result = state.isAuthenticated;\n\n  // TODO: AUTH: add access token verification or other authentication check here\n  // result = Boolean(sessionStorageGet('access_token', ''));\n\n  return result;\n}\n\n/**\n * Returns event handler to Logout current user\n * @returns {function} calling this event logs out current user\n */\nexport function useEventLogout() {\n  const navigate = useNavigate();\n  const [, dispatch] = useAppStore();\n\n  return useCallback(() => {\n    // TODO: AUTH: add auth and tokens cleanup here\n    // sessionStorageDelete('access_token');\n\n    dispatch({ type: 'LOG_OUT' });\n    navigate('/', { replace: true }); // Redirect to home page by reloading the App\n  }, [dispatch, navigate]);\n}\n\n/**\n * Adds watchdog and calls different callbacks on user login and logout\n * @param {function} afterLogin callback to call after user login\n * @param {function} afterLogout callback to call after user logout\n */\nexport function useAuthWatchdog(afterLogin: () => void, afterLogout: () => void) {\n  const [state, dispatch] = useAppStore();\n\n  useEffect(() => {\n    if (state.isAuthenticated) {\n      afterLogin?.();\n    } else {\n      afterLogout?.();\n    }\n  }, [state.isAuthenticated, dispatch, afterLogin, afterLogout]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/hooks/authFirebase.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token CurrentUser","line":6,"column":6,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect } from 'react';\nimport { useAppStore } from '../store';\nimport { User as FirebaseUser, getAuth, onAuthStateChanged, signOut } from 'firebase/auth';\nimport { useNavigate } from 'react-router-dom';\n\ntype CurrentUser = FirebaseUser | null | undefined; // Firebase User can be null, we also support undefined\n\n/**\n * Hook to get currently logged user\n * @returns {object | undefined} user data as object or undefined if user is not logged in\n */\nexport function useCurrentUser(): CurrentUser {\n  let result;\n  try {\n    const auth = getAuth();\n    result = auth.currentUser;\n  } catch (error) {\n    // Do nothing\n  }\n  return result;\n}\n\n/**\n * Hook to detect is current user authenticated or not\n * @returns {boolean} true if user is authenticated, false otherwise\n */\nexport function useIsAuthenticated(): boolean {\n  const currentUser = useCurrentUser();\n  return Boolean(currentUser);\n}\n\n/**\n * Returns event handler to Logout current user\n * @returns {function} calling this event logs out current user\n */\nexport function useEventLogout(): () => void {\n  const navigate = useNavigate();\n  const [, dispatch] = useAppStore();\n\n  return useCallback(async () => {\n    // TODO: AUTH: add auth and tokens cleanup here\n\n    // Firebase sign out\n    try {\n      const auth = getAuth();\n      await signOut(auth);\n    } catch (error) {\n      console.error(error);\n    }\n\n    dispatch({ type: 'LOG_OUT' });\n    navigate('/', { replace: true }); // Redirect to home page by reloading the App\n  }, [dispatch, navigate]);\n}\n\n/**\n * Adds Firebase Auth watchdog and calls different callbacks on login and logout\n * @param {function} afterLogin callback to call after user login\n * @param {function} afterLogout callback to call after user logout\n */\nexport function useAuthWatchdog(afterLogin: () => void, afterLogout: () => void) {\n  const [, dispatch] = useAppStore();\n\n  useEffect(() => {\n    const auth = getAuth();\n    onAuthStateChanged(auth, (firebaseUser) => {\n      if (firebaseUser) {\n        // Add Firebase User to AppStore\n        console.warn('Firebase user is logged in - uid:', firebaseUser?.uid);\n        dispatch({ type: 'LOG_IN', payload: firebaseUser });\n        // Call callback if any\n        afterLogin?.();\n      } else {\n        // Remove Firebase User from AppStore\n        console.warn('Firebase user is logged out');\n        dispatch({ type: 'LOG_OUT' });\n        // Call callback if any\n        afterLogout?.();\n      }\n    });\n  }, [dispatch, afterLogin, afterLogout]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/hooks/event.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/hooks/layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/index.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token as","line":7,"column":66,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport MainApp from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <MainApp />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/BottomBar/BottomBar.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":7,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ChangeEvent, FunctionComponent, useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router';\nimport { BottomNavigation, BottomNavigationAction } from '@mui/material';\nimport AppIcon from '../../components/AppIcon';\nimport { LinkToPage } from '../../utils/type';\n\ninterface Props {\n  items: Array<LinkToPage>;\n}\n\n/**\n * Renders horizontal Navigation Bar using MUI BottomNavigation component\n * @component BottomBar\n */\nconst BottomBar: FunctionComponent<Props> = ({ items }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const onNavigationChange = useCallback(\n    (event: ChangeEvent<{}>, newValue: string) => {\n      navigate(newValue);\n    },\n    [navigate]\n  );\n\n  return (\n    <BottomNavigation\n      value={location.pathname} // Automatically highlights bottom navigation for current page\n      showLabels // Always show labels on bottom navigation, otherwise label visible only for active page\n      onChange={onNavigationChange}\n    >\n      {items.map(({ title, path, icon }) => (\n        <BottomNavigationAction key={`${title}-${path}`} label={title} value={path} icon={<AppIcon icon={icon} />} />\n      ))}\n    </BottomNavigation>\n  );\n};\n\nexport default BottomBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/BottomBar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/PrivateLayout.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":23,"column":21,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, FunctionComponent, PropsWithChildren } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Stack } from '@mui/material';\nimport { AppIconButton, ErrorBoundary } from '../components';\nimport { LinkToPage } from '../utils/type';\nimport { useOnMobile } from '../hooks/layout';\nimport {\n  SIDE_BAR_DESKTOP_ANCHOR,\n  SIDE_BAR_MOBILE_ANCHOR,\n  SIDE_BAR_WIDTH,\n  TOP_BAR_DESKTOP_HEIGHT,\n  TOP_BAR_MOBILE_HEIGHT,\n} from './config';\nimport TopBar from './TopBar';\nimport SideBar from './SideBar';\n\n// TODO: change to your app name or other word\nconst TITLE_PRIVATE = '_TITLE_ app'; // Title for pages after authentication\n\n/**\n * SideBar navigation items with links\n */\nconst SIDE_BAR_ITEMS: Array<LinkToPage> = [\n  {\n    title: 'Home',\n    path: '/',\n    icon: 'home',\n  },\n  {\n    title: 'Profile (404)',\n    path: '/user',\n    icon: 'account',\n  },\n  {\n    title: 'About',\n    path: '/about',\n    icon: 'info',\n  },\n];\n\nif (process.env.REACT_APP_DEBUG === 'true') {\n  SIDE_BAR_ITEMS.push({\n    title: '[Debug Tools]',\n    path: '/dev',\n    icon: 'settings',\n  });\n}\n\n/**\n * Renders \"Private Layout\" composition\n * @layout PrivateLayout\n */\nconst PrivateLayout: FunctionComponent<PropsWithChildren> = ({ children }) => {\n  const navigation = useNavigate();\n  const [sideBarVisible, setSideBarVisible] = useState(false);\n  const onMobile = useOnMobile();\n\n  // Variant 1 - Sidebar is static on desktop and is a drawer on mobile\n  const sidebarOpen = onMobile ? sideBarVisible : true;\n  const sidebarVariant = onMobile ? 'temporary' : 'persistent';\n\n  // Variant 2 - Sidebar is drawer on mobile and desktop\n  // const sidebarOpen = sideBarVisible;\n  // const sidebarVariant = 'temporary';\n\n  const title = TITLE_PRIVATE;\n  document.title = title; // Also Update Tab Title\n\n  const onLogoClick = useCallback(() => {\n    // Navigate to first SideBar's item or to '/' when clicking on Logo/Menu icon when SideBar is already visible\n    navigation(SIDE_BAR_ITEMS?.[0]?.path || '/');\n  }, [navigation]);\n\n  const onSideBarOpen = () => {\n    if (!sideBarVisible) setSideBarVisible(true); // Don't re-render Layout when SideBar is already open\n  };\n\n  const onSideBarClose = () => {\n    if (sideBarVisible) setSideBarVisible(false); // Don't re-render Layout when SideBar is already closed\n  };\n\n  // console.log(\n  //   'Render using PrivateLayout, onMobile:',\n  //   onMobile,\n  //   'sidebarOpen:',\n  //   sidebarOpen,\n  //   'sidebarVariant:',\n  //   sidebarVariant\n  // );\n\n  return (\n    <Stack\n      direction=\"column\"\n      sx={{\n        minHeight: '100vh', // Full screen height\n        paddingTop: onMobile ? TOP_BAR_MOBILE_HEIGHT : TOP_BAR_DESKTOP_HEIGHT,\n        paddingLeft: sidebarOpen && SIDE_BAR_DESKTOP_ANCHOR.includes('left') ? SIDE_BAR_WIDTH : 0,\n        paddingRight: sidebarOpen && SIDE_BAR_DESKTOP_ANCHOR.includes('right') ? SIDE_BAR_WIDTH : 0,\n      }}\n    >\n      <Stack component=\"header\">\n        <TopBar\n          startNode={<AppIconButton icon=\"logo\" onClick={sidebarOpen ? onLogoClick : onSideBarOpen} />}\n          title={title}\n        />\n\n        <SideBar\n          anchor={onMobile ? SIDE_BAR_MOBILE_ANCHOR : SIDE_BAR_DESKTOP_ANCHOR}\n          open={sidebarOpen}\n          variant={sidebarVariant}\n          items={SIDE_BAR_ITEMS}\n          onClose={onSideBarClose}\n        />\n      </Stack>\n\n      <Stack\n        component=\"main\"\n        sx={{\n          flexGrow: 1, // Takes all possible space\n          paddingLeft: 1,\n          paddingRight: 1,\n          paddingTop: 1,\n        }}\n      >\n        <ErrorBoundary name=\"Content\">{children}</ErrorBoundary>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default PrivateLayout;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/PublicLayout.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":19,"column":21,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, PropsWithChildren, useCallback, useState } from 'react';\nimport { Stack } from '@mui/material/';\nimport { useAppStore } from '../store/AppStore';\nimport { ErrorBoundary, AppIconButton } from '../components';\nimport { LinkToPage } from '../utils/type';\nimport { useOnMobile } from '../hooks/layout';\nimport { BOTTOM_BAR_DESKTOP_VISIBLE, TOP_BAR_DESKTOP_HEIGHT, TOP_BAR_MOBILE_HEIGHT } from './config';\nimport { useEventSwitchDarkMode } from '../hooks/event';\nimport TopBar from './TopBar';\nimport SideBar from './SideBar';\nimport BottomBar from './BottomBar';\n\n// TODO: change to your app name or other word\nconst TITLE_PUBLIC = '_TITLE_ app'; // Title for pages without/before authentication\n\n/**\n * SideBar navigation items with links\n */\nconst SIDE_BAR_ITEMS: Array<LinkToPage> = [\n  {\n    title: 'Log In',\n    path: '/auth/login',\n    icon: 'login',\n  },\n  {\n    title: 'Sign Up',\n    path: '/auth/signup',\n    icon: 'signup',\n  },\n  {\n    title: 'About',\n    path: '/about',\n    icon: 'info',\n  },\n];\n\nif (process.env.REACT_APP_DEBUG === 'true') {\n  SIDE_BAR_ITEMS.push({\n    title: '[Debug Tools]',\n    path: '/dev',\n    icon: 'settings',\n  });\n}\n\n/**\n * BottomBar navigation items with links\n */\nconst BOTTOM_BAR_ITEMS: Array<LinkToPage> = [\n  {\n    title: 'Log In',\n    path: '/auth/login',\n    icon: 'login',\n  },\n  {\n    title: 'Sign Up',\n    path: '/auth/signup',\n    icon: 'signup',\n  },\n  {\n    title: 'About',\n    path: '/about',\n    icon: 'info',\n  },\n];\n\n/**\n * Renders \"Public Layout\" composition\n * @layout PublicLayout\n */\nconst PublicLayout: FunctionComponent<PropsWithChildren> = ({ children }) => {\n  const onMobile = useOnMobile();\n  const onSwitchDarkMode = useEventSwitchDarkMode();\n  const [sideBarVisible, setSideBarVisible] = useState(false);\n  const [state] = useAppStore();\n  const bottomBarVisible = onMobile || BOTTOM_BAR_DESKTOP_VISIBLE;\n\n  // Variant 1 - Sidebar is static on desktop and is a drawer on mobile\n  // const sidebarOpen = onMobile ? sideBarVisible : true;\n  // const sidebarVariant = onMobile ? 'temporary' : 'persistent';\n\n  // Variant 2 - Sidebar is drawer on mobile and desktop\n  const sidebarOpen = sideBarVisible;\n  const sidebarVariant = 'temporary';\n\n  const title = TITLE_PUBLIC;\n  document.title = title; // Also Update Tab Title\n\n  const onSideBarOpen = useCallback(() => {\n    if (!sideBarVisible) setSideBarVisible(true); // Don't re-render Layout when SideBar is already open\n  }, [sideBarVisible]);\n\n  const onSideBarClose = useCallback(() => {\n    if (sideBarVisible) setSideBarVisible(false); // Don't re-render Layout when SideBar is already closed\n  }, [sideBarVisible]);\n\n  // console.log(\n  //   'Render using PublicLayout, onMobile:',\n  //   onMobile,\n  //   'sidebarOpen:',\n  //   sidebarOpen,\n  //   'sidebarVariant:',\n  //   sidebarVariant\n  // );\n\n  return (\n    <Stack\n      sx={{\n        minHeight: '100vh', // Full screen height\n        paddingTop: onMobile ? TOP_BAR_MOBILE_HEIGHT : TOP_BAR_DESKTOP_HEIGHT,\n      }}\n    >\n      <Stack component=\"header\">\n        <TopBar\n          startNode={<AppIconButton icon=\"logo\" onClick={onSideBarOpen} />}\n          title={title}\n          endNode={\n            <AppIconButton\n              icon={state.darkMode ? 'day' : 'night'} // Variant 1\n              // icon=\"daynight\" // Variant 2\n              title={state.darkMode ? 'Switch to Light mode' : 'Switch to Dark mode'}\n              onClick={onSwitchDarkMode}\n            />\n          }\n        />\n\n        <SideBar\n          anchor=\"left\"\n          open={sidebarOpen}\n          variant={sidebarVariant}\n          items={SIDE_BAR_ITEMS}\n          onClose={onSideBarClose}\n        />\n      </Stack>\n\n      <Stack\n        component=\"main\"\n        sx={{\n          flexGrow: 1, // Takes all possible space\n          padding: 1,\n        }}\n      >\n        <ErrorBoundary name=\"Content\">{children}</ErrorBoundary>\n      </Stack>\n\n      <Stack component=\"footer\">{bottomBarVisible && <BottomBar items={BOTTOM_BAR_ITEMS} />}</Stack>\n    </Stack>\n  );\n};\n\nexport default PublicLayout;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/SideBar/SideBar.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":11,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, useCallback, MouseEvent } from 'react';\nimport { Stack, Divider, Drawer, DrawerProps, FormControlLabel, Switch, Tooltip } from '@mui/material';\nimport { AppIconButton } from '../../components';\nimport { useAppStore } from '../../store/AppStore';\nimport { LinkToPage } from '../../utils/type';\nimport { useEventLogout, useEventSwitchDarkMode, useIsAuthenticated, useOnMobile } from '../../hooks';\nimport SideBarNavList from './SideBarNavList';\nimport { SIDE_BAR_WIDTH, TOP_BAR_DESKTOP_HEIGHT } from '../config';\nimport UserInfo from '../../components/UserInfo';\n\ninterface Props extends Pick<DrawerProps, 'anchor' | 'className' | 'open' | 'variant' | 'onClose'> {\n  items: Array<LinkToPage>;\n}\n\n/**\n * Renders SideBar with Menu and User details\n * Actually for Authenticated users only, rendered in \"Private Layout\"\n * @component SideBar\n * @param {string} anchor - 'left' or 'right'\n * @param {boolean} open - the Drawer is visible when true\n * @param {string} variant - variant of the Drawer, one of 'permanent', 'persistent', 'temporary'\n * @param {function} onClose - called when the Drawer is closing\n */\nconst SideBar: FunctionComponent<Props> = ({ anchor, open, variant, items, onClose, ...restOfProps }) => {\n  const [state] = useAppStore();\n  // const isAuthenticated = state.isAuthenticated; // Variant 1\n  const isAuthenticated = useIsAuthenticated(); // Variant 2\n  const onMobile = useOnMobile();\n\n  const onSwitchDarkMode = useEventSwitchDarkMode();\n  const onLogout = useEventLogout();\n\n  const handleAfterLinkClick = useCallback(\n    (event: MouseEvent) => {\n      if (variant === 'temporary' && typeof onClose === 'function') {\n        onClose(event, 'backdropClick');\n      }\n    },\n    [variant, onClose]\n  );\n\n  return (\n    <Drawer\n      anchor={anchor}\n      open={open}\n      variant={variant}\n      PaperProps={{\n        sx: {\n          width: SIDE_BAR_WIDTH,\n          marginTop: onMobile ? 0 : variant === 'temporary' ? 0 : TOP_BAR_DESKTOP_HEIGHT,\n          height: onMobile ? '100%' : variant === 'temporary' ? '100%' : `calc(100% - ${TOP_BAR_DESKTOP_HEIGHT})`,\n        },\n      }}\n      onClose={onClose}\n    >\n      <Stack\n        sx={{\n          height: '100%',\n          padding: 2,\n        }}\n        {...restOfProps}\n        onClick={handleAfterLinkClick}\n      >\n        {isAuthenticated && (\n          <>\n            <UserInfo showAvatar />\n            <Divider />\n          </>\n        )}\n\n        <SideBarNavList items={items} showIcons />\n\n        <Divider />\n\n        <Stack\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-evenly',\n            alignItems: 'center',\n            marginTop: 2,\n          }}\n        >\n          <Tooltip title={state.darkMode ? 'Switch to Light mode' : 'Switch to Dark mode'}>\n            <FormControlLabel\n              label={!state.darkMode ? 'Light mode' : 'Dark mode'}\n              control={<Switch checked={state.darkMode} onChange={onSwitchDarkMode} />}\n            />\n          </Tooltip>\n\n          {isAuthenticated && <AppIconButton icon=\"logout\" title=\"Logout Current User\" onClick={onLogout} />}\n        </Stack>\n      </Stack>\n    </Drawer>\n  );\n};\n\nexport default SideBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/SideBar/SideBarNavItem.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":7,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, MouseEventHandler } from 'react';\nimport { ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\nimport { AppIcon, AppLink } from '../../components';\nimport { LinkToPage } from '../../utils/type';\nimport { useLocation } from 'react-router';\n\ninterface Props extends LinkToPage {\n  openInNewTab?: boolean;\n  selected?: boolean;\n  onClick?: MouseEventHandler;\n}\n\n/**\n * Renders Navigation Item for SideBar, detects current url and sets selected state if needed\n * @component SideBarNavItem\n */\nconst SideBarNavItem: FunctionComponent<Props> = ({\n  openInNewTab,\n  icon,\n  path,\n  selected: propSelected = false,\n  subtitle,\n  title,\n  onClick,\n}) => {\n  const location = useLocation();\n  const selected = propSelected || (path && path.length > 1 && location.pathname.startsWith(path)) || false;\n\n  return (\n    <ListItemButton\n      component={AppLink}\n      selected={selected}\n      to={path}\n      href=\"\" // Hard reset for .href property, otherwise links are always opened in new tab :(\n      openInNewTab={openInNewTab}\n      onClick={onClick}\n    >\n      <ListItemIcon>{icon && <AppIcon icon={icon} />}</ListItemIcon>\n      <ListItemText primary={title} secondary={subtitle} />\n    </ListItemButton>\n  );\n};\n\nexport default SideBarNavItem;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/SideBar/SideBarNavList.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":6,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, MouseEventHandler } from 'react';\nimport List from '@mui/material/List';\nimport SideBarNavItem from './SideBarNavItem';\nimport { LinkToPage } from '../../utils/type';\n\ninterface Props {\n  items: Array<LinkToPage>;\n  showIcons?: boolean;\n  onClick?: MouseEventHandler;\n}\n\n/**\n * Renders list of Navigation Items inside SideBar\n * @component SideBarNavList\n * @param {array} items - list of objects to render as navigation items\n * @param {boolean} [showIcons] - icons in navigation items are visible when true\n * @param {function} [onAfterLinkClick] - optional callback called when some navigation item was clicked\n */\nconst SideBarNavList: FunctionComponent<Props> = ({ items, showIcons, onClick, ...restOfProps }) => {\n  return (\n    <List component=\"nav\" {...restOfProps}>\n      {items.map(({ icon, path, title }) => (\n        <SideBarNavItem\n          key={`${title}-${path}`}\n          icon={showIcons ? icon : undefined}\n          path={path}\n          title={title}\n          onClick={onClick}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default SideBarNavList;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/SideBar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/TopBar/TopBar.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppBar, Toolbar, Typography } from '@mui/material';\nimport { FunctionComponent, ReactNode } from 'react';\n\ninterface Props {\n  endNode?: ReactNode;\n  startNode?: ReactNode;\n  title?: string;\n}\n\n/**\n * Renders TopBar composition\n * @component TopBar\n */\nconst TopBar: FunctionComponent<Props> = ({ endNode, startNode, title = '', ...restOfProps }) => {\n  return (\n    <AppBar\n      component=\"div\"\n      sx={\n        {\n          // boxShadow: 'none', // Uncomment to hide shadow\n        }\n      }\n      {...restOfProps}\n    >\n      <Toolbar disableGutters sx={{ paddingX: 1 }}>\n        {startNode}\n\n        <Typography\n          variant=\"h6\"\n          sx={{\n            marginX: 1,\n            flexGrow: 1,\n            textAlign: 'center',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          {title}\n        </Typography>\n\n        {endNode}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TopBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/TopBar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/layout/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/react-app-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/reportWebVitals.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":3,"column":38,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/routes/PrivateRoutes.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":15,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PrivateLayout } from '../layout';\nimport { NotFoundView } from '../views';\nimport AboutView from '../views/About';\nimport DevView from '../views/Dev';\nimport WelcomeView from '../views/Welcome';\n\n/**\n * List of routes available  for authenticated users\n * Also renders the \"Private Layout\" composition\n * @routes PrivateRoutes\n */\nconst PrivateRoutes = () => {\n  return (\n    <PrivateLayout>\n      <Routes>\n        <Route path=\"/\" element={<WelcomeView />} />\n        <Route\n          // This fixes other tabs with unfinished auth flow\n          path=\"auth/*\"\n          element={<Navigate to=\"/\" replace />}\n        />\n        <Route path=\"about\" element={<AboutView />} />\n        {process.env.REACT_APP_DEBUG && <Route path=\"dev\" element={<DevView />} />}\n        <Route path=\"*\" element={<NotFoundView />} />\n      </Routes>\n    </PrivateLayout>\n  );\n};\n\nexport default PrivateRoutes;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/routes/PublicRoutes.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":16,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Route, Routes } from 'react-router-dom';\nimport { PublicLayout } from '../layout';\nimport { NotFoundView } from '../views';\nimport AboutView from '../views/About';\nimport DevView from '../views/Dev';\nimport LoginEmailView from '../views/Auth/Login/LoginEmailView';\nimport AuthRoutes from '../views/Auth';\n\n/**\n * List of routes available for anonymous users\n * Also renders the \"Public Layout\" composition\n * @routes PublicRoutes\n */\nconst PublicRoutes = () => {\n  return (\n    <PublicLayout>\n      <Routes>\n        <Route path=\"/\" element={<LoginEmailView />} />\n        <Route path=\"auth/*\" element={<AuthRoutes />} />\n        <Route path=\"about\" element={<AboutView />} />\n        {process.env.REACT_APP_DEBUG === 'true' && <Route path=\"dev\" element={<DevView />} />}\n        <Route path=\"*\" element={<NotFoundView />} />\n      </Routes>\n    </PublicLayout>\n  );\n};\n\nexport default PublicRoutes;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/routes/Routes.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":31,"column":12,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AppLoading } from '../components';\nimport { useAuthWatchdog, useIsAuthenticated } from '../hooks';\nimport PublicRoutes from './PublicRoutes';\nimport PrivateRoutes from './PrivateRoutes';\n\n/**\n * Renders routes depending on Authenticated or Anonymous users\n * @component Routes\n */\nconst Routes = () => {\n  const [loading, setLoading] = useState(true);\n  const [refresh, setRefresh] = useState(0);\n  const isAuthenticated = useIsAuthenticated();\n\n  const afterLogin = useCallback(() => {\n    setRefresh((old) => old + 1); // Force re-render\n    setLoading(false);\n  }, []);\n\n  const afterLogout = useCallback(() => {\n    setRefresh((old) => old + 1); // Force re-render\n    setLoading(false);\n  }, []);\n\n  // Create Auth watchdog, that calls our callbacks wen user is logged in or logged out\n  useAuthWatchdog(afterLogin, afterLogout);\n\n  if (loading) {\n    return <AppLoading />;\n  }\n\n  console.log(`Routes() - isAuthenticated: ${isAuthenticated}, refreshCount: ${refresh}`);\n  return (\n    <BrowserRouter>{isAuthenticated ? <PrivateRoutes key={refresh} /> : <PublicRoutes key={refresh} />}</BrowserRouter>\n  );\n};\nexport default Routes;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/routes/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/store/AppReducer.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":10,"column":17,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { localStorageSet } from '../utils/localStorage';\nimport { AppStoreState } from './AppStore';\n\n/**\n * Reducer for global AppStore using \"Redux styled\" actions\n * @param {object} state - current/default state\n * @param {string} action.type - unique name of the action\n * @param {*} [action.payload] - optional data object or the function to get data object\n */\nconst AppReducer: React.Reducer<AppStoreState, any> = (state, action) => {\n  // console.log('AppReducer() - action:', action);\n  switch (action.type || action.action) {\n    case 'CURRENT_USER':\n      return {\n        ...state,\n        currentUser: action?.currentUser || action?.payload,\n      };\n    case 'SIGN_UP':\n    case 'LOG_IN':\n      return {\n        ...state,\n        isAuthenticated: true,\n      };\n    case 'LOG_OUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        currentUser: undefined, // Also reset previous user data\n      };\n    case 'DARK_MODE': {\n      const darkMode = action?.darkMode ?? action?.payload;\n      localStorageSet('darkMode', darkMode);\n      return {\n        ...state,\n        darkMode,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default AppReducer;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/store/AppStore.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token interface","line":17,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createContext,\n  useReducer,\n  useContext,\n  FunctionComponent,\n  Dispatch,\n  ComponentType,\n  PropsWithChildren,\n} from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport AppReducer from './AppReducer';\nimport { localStorageGet } from '../utils/localStorage';\n\n/**\n * AppState structure and initial values\n */\nexport interface AppStoreState {\n  darkMode: boolean;\n  isAuthenticated: boolean;\n  currentUser?: object | undefined;\n}\nconst INITIAL_APP_STATE: AppStoreState = {\n  darkMode: false, // Overridden by useMediaQuery('(prefers-color-scheme: dark)') in AppStore\n  isAuthenticated: false, // Overridden in AppStore by checking auth token\n};\n\n/**\n * Instance of React Context for global AppStore\n */\ntype AppContextReturningType = [AppStoreState, Dispatch<any>];\nconst AppContext = createContext<AppContextReturningType>([INITIAL_APP_STATE, () => null]);\n\n/**\n * Main global Store as HOC with React Context API\n *\n * import {AppStoreProvider} from './store'\n * ...\n * <AppStoreProvider>\n *  <App/>\n * </AppStoreProvider>\n */\nconst AppStoreProvider: FunctionComponent<PropsWithChildren> = ({ children }) => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const previousDarkMode = Boolean(localStorageGet('darkMode'));\n  // const tokenExists = Boolean(loadToken());\n\n  const initialState: AppStoreState = {\n    ...INITIAL_APP_STATE,\n    darkMode: previousDarkMode || prefersDarkMode,\n    // isAuthenticated: tokenExists,\n  };\n  const value: AppContextReturningType = useReducer(AppReducer, initialState);\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n\n/**\n * Hook to use the AppStore in functional components\n *\n * import {useAppStore} from './store'\n * ...\n * const [state, dispatch] = useAppStore();\n */\nconst useAppStore = (): AppContextReturningType => useContext(AppContext);\n\n/**\n * HOC to inject the ApStore to class component, also works for functional components\n *\n * import {withAppStore} from './store'\n * ...\n * class MyComponent\n * ...\n * export default withAppStore(MyComponent)\n */\ninterface WithAppStoreProps {\n  store: object;\n}\nconst withAppStore =\n  (Component: ComponentType<WithAppStoreProps>): FunctionComponent =>\n  (props) => {\n    return <Component {...props} store={useAppStore()} />;\n  };\n\nexport { AppStoreProvider as AppStore, AppContext, useAppStore, withAppStore };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/store/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/theme/AppThemeProvider.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":9,"column":37,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent, useMemo, PropsWithChildren } from 'react';\nimport { CacheProvider, EmotionCache } from '@emotion/react';\nimport { createTheme, CssBaseline, ThemeProvider } from '@mui/material';\nimport { useAppStore } from '../store';\nimport DARK_THEME from './dark';\nimport LIGHT_THEME from './light';\nimport createEmotionCache from './createEmotionCache';\n\nfunction getThemeByDarkMode(darkMode: boolean) {\n  return darkMode ? createTheme(DARK_THEME) : createTheme(LIGHT_THEME);\n}\n\n// Client-side cache, shared for the whole session of the user in the browser.\nconst CLIENT_SIDE_EMOTION_CACHE = createEmotionCache();\n\ninterface Props extends PropsWithChildren {\n  emotionCache?: EmotionCache; // You can omit it if you don't want to use Emotion styling library\n}\n\n/**\n * Renders composition of Emotion's CacheProvider + MUI's ThemeProvider to wrap content of entire App\n * The Light or Dark themes applied depending on global .darkMode state\n * @param {EmotionCache} [emotionCache] - shared Emotion's cache to use in the App\n */\nconst AppThemeProvider: FunctionComponent<Props> = ({ children, emotionCache = CLIENT_SIDE_EMOTION_CACHE }) => {\n  const [state] = useAppStore();\n\n  const theme = useMemo(\n    () => getThemeByDarkMode(state.darkMode),\n    [state.darkMode] // Observe AppStore and re-create the theme when .darkMode changes\n  );\n\n  return (\n    <CacheProvider value={emotionCache}>\n      {/* <StyledEngineProvider injectFirst> use this instead of Emotion's <CacheProvider/> if you want to use alternate styling library */}\n      <ThemeProvider theme={theme}>\n        <CssBaseline /* MUI Styles */ />\n        {children}\n      </ThemeProvider>\n      {/* </StyledEngineProvider> */}\n    </CacheProvider>\n  );\n};\n\nexport default AppThemeProvider;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/theme/colors.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":3,"column":20,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PaletteOptions, SimplePaletteColorOptions } from '@mui/material';\n\nconst COLOR_PRIMARY: SimplePaletteColorOptions = {\n  main: '#64B5F6',\n  contrastText: '#000000',\n  // light: '#64B5F6',\n  // dark: '#64B5F6',\n};\n\nconst COLOR_SECONDARY: SimplePaletteColorOptions = {\n  main: '#EF9A9A',\n  contrastText: '#000000',\n  // light: '#EF9A9A',\n  // dark: '#EF9A9A',\n};\n\n/**\n * MUI colors set to use in theme.palette\n */\nexport const PALETTE_COLORS: Partial<PaletteOptions> = {\n  primary: COLOR_PRIMARY,\n  secondary: COLOR_SECONDARY,\n  // error: COLOR_ERROR,\n  // warning: COLOR_WARNING;\n  // info: COLOR_INFO;\n  // success: COLOR_SUCCESS;\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/theme/createEmotionCache.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":9,"column":37,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import createCache, { EmotionCache } from '@emotion/cache';\n\n/**\n * Creates an emotion cache with .prepend option set to true.\n * This moves MUI styles to the top of the <head> so they're loaded first.\n * It allows overriding MUI styles with other styling solutions, like CSS modules.\n * @returns {EmotionCache}\n */\nexport function createEmotionCache(): EmotionCache {\n  return createCache({ key: 'css', prepend: true });\n}\n\nexport default createEmotionCache;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/theme/dark.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":7,"column":24,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ThemeOptions } from '@mui/material';\nimport { PALETTE_COLORS } from './colors';\n\n/**\n * MUI theme options for \"Dark Mode\"\n */\nexport const DARK_THEME: ThemeOptions = {\n  palette: {\n    mode: 'dark',\n    // background: {\n    //   paper: '#424242', // Gray 800 - Background of \"Paper\" based component\n    //   default: '#121212',\n    // },\n    ...PALETTE_COLORS,\n  },\n};\n\nexport default DARK_THEME;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/theme/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/theme/light.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":7,"column":25,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ThemeOptions } from '@mui/material';\nimport { PALETTE_COLORS } from './colors';\n\n/**\n * MUI theme options for \"Light Mode\"\n */\nexport const LIGHT_THEME: ThemeOptions = {\n  palette: {\n    mode: 'light',\n    // background: {\n    //   paper: '#f5f5f5', // Gray 100 - Background of \"Paper\" based component\n    //   default: '#FFFFFF',\n    // },\n    ...PALETTE_COLORS,\n  },\n};\n\nexport default LIGHT_THEME;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/date.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":13,"column":42,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { format } from 'date-fns';\n\nexport const FORMAT_DATE_TIME = 'yyyy-MM-dd HH:mm:ss';\nexport const FORMAT_DATE_ONLY = 'yyyy-MM-dd';\nexport const FORMAT_TIME_ONLY = 'HH:mm:ss';\n\n/**\n * Main Data and Time conversion utility to keep formats the same across entire Application\n * @param {string|object} dateOrString - date to show as UTC string or Date object instance\n * @param {string} [dateFormat] - time conversion template in 'date-fns' format, `FORMAT_DATE_TIME` by default\n * @param {string} [fallbackValue] - optional fallback value if data conversion is not possible\n */\nexport function dateToString(dateOrString: string | Date, dateFormat = FORMAT_DATE_TIME, fallbackValue = ''): string {\n  const date = typeof dateOrString === 'object' ? dateOrString : new Date(dateOrString);\n  let result;\n  try {\n    result = format(date, dateFormat);\n  } catch (error) {\n    result = fallbackValue;\n  }\n  return result;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/environment.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":8,"column":36,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const IS_SERVER = typeof window === 'undefined';\nexport const IS_BROWSER = typeof window !== 'undefined' && typeof window?.document !== 'undefined';\n/* eslint-disable no-restricted-globals */\nexport const IS_WEBWORKER =\n  typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope';\n/* eslint-enable no-restricted-globals */\n\nexport function getCurrentVersion(): string {\n  return process.env?.npm_package_version ?? process.env.REACT_APP_VERSION ?? 'unknown';\n}\n\nexport function getCurrentEnvironment(): string {\n  return process.env?.NODE_ENV ?? 'development';\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/form.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token as","line":10,"column":3,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, SyntheticEvent, ChangeEvent } from 'react';\nimport validate from 'validate.js';\nimport { ObjectPropByName } from './type';\n\n// Same props to style Input, TextField, and so on across the Application\nexport const SHARED_CONTROL_PROPS = {\n  variant: 'outlined',\n  margin: 'normal', // 'dense', 'none'\n  fullWidth: true,\n} as const;\n\n// \"Schema\" for formState\ninterface FormState {\n  values: object; // List of Input Values as string|boolean\n  touched?: object; // List of Inputs have been touched as boolean\n  errors?: object; // List of Errors for every field as array[] of strings\n}\n\n/**\n * Basic object to use as initial value for formState\n * Usage: const [formState, setFormState] = useState(DEFAULT_FORM_STATE);\n */\nexport const DEFAULT_FORM_STATE: FormState = {\n  values: {},\n  touched: {},\n  errors: {},\n};\n\n/**\n * Reusable event to cancel the default behavior\n */\nexport const eventPreventDefault = (event: SyntheticEvent) => {\n  event.preventDefault();\n};\n\n/**\n * Verifies does the From field with given Name has the Error\n */\nexport const formHasError = (formState: FormState, fieldName: string): boolean => {\n  return Boolean(\n    (formState.touched as ObjectPropByName)[fieldName] && (formState.errors as ObjectPropByName)[fieldName]\n  );\n};\n\n/**\n * Returns text of \"top most\" Error for the Form field by given Name.\n * Returns null if there is no Error.\n */\nexport const formGetError = (formState: FormState, fieldName: string): string => {\n  return formHasError(formState, fieldName) ? (formState.errors as ObjectPropByName)[fieldName]?.[0] : null;\n};\n\n// Params for useAppForm() hook\ninterface UseAppFormParams {\n  validationSchema: object;\n  initialValues: object;\n}\n\n// Return type for useAppForm() hook\n\ninterface UseAppFormReturn {\n  formState: FormState;\n  setFormState: (formState: FormState) => void;\n  onFieldChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  fieldGetError: (fieldName: string) => string;\n  fieldHasError: (fieldName: string) => boolean;\n  isFormValid: () => boolean;\n  isFormTouched: () => boolean;\n}\n\n/**\n * Application \"standard\" From as Hook\n * Note: the \"name\" prop of all Form controls must be set! We use event.target?.name for binding data.\n * Usage: const [formState, setFormState, onFieldChange, fieldGetError, fieldHasError] = useAppForm({\n    validationSchema: XXX_FORM_SCHEMA,\n    initialValues: {name: 'John Doe'},\n  });\n * @param {object} options.validationSchema - validation schema in 'validate.js' format\n * @param {object} [options.initialValues] - optional initialization data for formState.values\n */\nexport function useAppForm({ validationSchema, initialValues = {} }: UseAppFormParams): UseAppFormReturn {\n  // Validate params\n  if (!validationSchema) {\n    throw new Error('useAppForm() - the option `validationSchema` is required');\n  }\n  if (typeof validationSchema !== 'object') {\n    throw new Error('useAppForm() - the option `validationSchema` should be an object');\n  }\n  if (typeof initialValues !== 'object') {\n    throw new Error('useAppForm() - the option `initialValues` should be an object');\n  }\n\n  // Create Form state and apply initialValues if set\n  const [formState, setFormState] = useState({ ...DEFAULT_FORM_STATE, values: initialValues });\n\n  // Validation by 'validate.js' on every formState.values change\n  useEffect(() => {\n    const errors = validate(formState.values, validationSchema);\n    setFormState((currentFormState) => ({\n      ...currentFormState,\n      errors: errors || {},\n    }));\n  }, [validationSchema, formState.values]);\n\n  // Event to call on every Input change. Note: the \"name\" props of the Input control must be set!\n  const onFieldChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const name = event.target?.name;\n    const value =\n      event.target?.type === 'checkbox'\n        ? event.target?.checked // Checkbox Input\n        : event.target?.value; // Any other Input\n\n    setFormState((formState) => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [name]: value,\n      },\n      touched: {\n        ...formState.touched,\n        [name]: true,\n      },\n    }));\n  }, []);\n\n  // Returns text of \"top most\" Error for the Field by given Name or null\n  const fieldGetError = (fieldName: string): string => formGetError(formState, fieldName);\n\n  // Verifies does the Field with given Name has the Error\n  const fieldHasError = (fieldName: string): boolean => formHasError(formState, fieldName);\n\n  // Verifies does form has any error\n  const isFormValid = () => Object.keys(formState?.errors ?? {}).length < 1;\n\n  // Verifies does any of the form fields has been touched\n  const isFormTouched = () => Object.keys(formState?.touched ?? {}).length > 0;\n\n  // Return state and methods\n  return {\n    formState,\n    isFormValid,\n    isFormTouched,\n    onFieldChange,\n    fieldGetError,\n    fieldHasError,\n    setFormState,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/localStorage.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":8,"column":37,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IS_SERVER } from './environment';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Smartly reads value from localStorage\n */\nexport function localStorageGet(name: string, defaultValue: any = ''): any {\n  if (IS_SERVER) {\n    return defaultValue; // We don't have access to localStorage on the server\n  }\n\n  const valueFromStore = localStorage.getItem(name);\n  if (valueFromStore === null) return defaultValue; // No value in store, return default one\n\n  try {\n    const jsonParsed: unknown = JSON.parse(valueFromStore);\n    if (['boolean', 'number', 'bigint', 'string', 'object'].includes(typeof jsonParsed)) {\n      return jsonParsed; // We successfully parse JS value from the store\n    }\n  } catch (error) {\n    // Do nothing\n  }\n\n  return valueFromStore; // Return string value as it is\n}\n\n/**\n * Smartly writes value into localStorage\n */\nexport function localStorageSet(name: string, value: any) {\n  if (IS_SERVER) {\n    return; // Do nothing on server side\n  }\n  if (typeof value === 'undefined') {\n    return; // Do not store undefined values\n  }\n  let valueAsString: string;\n  if (typeof value === 'object') {\n    valueAsString = JSON.stringify(value);\n  } else {\n    valueAsString = String(value);\n  }\n\n  localStorage.setItem(name, valueAsString);\n}\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Deletes value by name from localStorage, if specified name is empty entire localStorage is cleared.\n */\nexport function localStorageDelete(name: string) {\n  if (IS_SERVER) {\n    return; // Do nothing on server side\n  }\n  if (name) {\n    localStorage.removeItem(name);\n  } else {\n    localStorage.clear();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/navigation.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":15,"column":31,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Disables \"Back\" button for current page\n * Usage: Call function in useEffect(  ,[]) or directly\n */\nexport function disableBackNavigation() {\n  window.history.pushState(null, '', window.location.href);\n  window.onpopstate = function () {\n    window.history.go(1);\n  };\n}\n\n/**\n * Navigates to the specified URL with options\n */\nexport function navigateTo(url: string, replaceInsteadOfPush = false, optionalTitle = '') {\n  if (replaceInsteadOfPush) {\n    window.history.replaceState(null, optionalTitle, url);\n  } else {\n    window.history.pushState(null, optionalTitle, url);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/path.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":6,"column":38,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Checks last char of the string is it a slash or not.\n * @param {string} path - the path to check.\n * @returns {boolean} true if last char is a slash.\n */\nexport function hasTrailingSlash(path: string): boolean {\n  return (\n    typeof path === 'string' && (path?.charAt(path?.length - 1) === '/' || path?.charAt(path?.length - 1) === '\\\\')\n  );\n}\n\n/**\n * Adds a slash to the path if it doesn't have one.\n */\nexport function addTrailingSlash(path: string): string {\n  return hasTrailingSlash(path) ? path : path + '/';\n}\n\n/**\n * Removes ending slash from the path if it has one.\n */\nexport function removeTrailingSlash(path: string): string {\n  return hasTrailingSlash(path) ? path.slice(0, -1) : path;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/sessionStorage.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":8,"column":39,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IS_SERVER } from './environment';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Smartly reads value from sessionStorage\n */\nexport function sessionStorageGet(name: string, defaultValue: any = ''): any {\n  if (IS_SERVER) {\n    return defaultValue; // We don't have access to sessionStorage on the server\n  }\n\n  const valueFromStore = sessionStorage.getItem(name);\n  if (valueFromStore === null) return defaultValue; // No value in store, return default one\n\n  try {\n    const jsonParsed: unknown = JSON.parse(valueFromStore);\n    if (['boolean', 'number', 'bigint', 'string', 'object'].includes(typeof jsonParsed)) {\n      return jsonParsed; // We successfully parse JS value from the store\n    }\n  } catch (error) {\n    // Do nothing\n  }\n\n  return valueFromStore; // Return string value as it is\n}\n\n/**\n * Smartly writes value into sessionStorage\n */\nexport function sessionStorageSet(name: string, value: any) {\n  if (IS_SERVER) {\n    return; // Do nothing on server side\n  }\n  if (typeof value === 'undefined') {\n    return; // Do not store undefined values\n  }\n  let valueAsString: string;\n  if (typeof value === 'object') {\n    valueAsString = JSON.stringify(value);\n  } else {\n    valueAsString = String(value);\n  }\n\n  sessionStorage.setItem(name, valueAsString);\n}\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Deletes value by name from sessionStorage, if specified name is empty entire sessionStorage is cleared.\n */\nexport function sessionStorageDelete(name: string) {\n  if (IS_SERVER) {\n    return; // Do nothing on server side\n  }\n  if (name) {\n    sessionStorage.removeItem(name);\n  } else {\n    sessionStorage.clear();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/sleep.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/style.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token type","line":3,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Theme } from '@mui/material/styles';\n\nexport type ColorName =\n  | 'default' // MUI 5.x removes 'default' form Button, we need to fix this\n  | 'primary'\n  | 'secondary'\n  | 'error' // Missing in MUI 4.x\n  | 'warning' // Missing in MUI 4.x\n  | 'info' // Missing in MUI 4.x\n  | 'success' // Missing in MUI 4.x\n  | 'false' // Missing in MUI 5.x\n  | 'true'; // Missing in MUI 5.x\n\n/**\n * Makes style to use for Material UI Paper components across the App\n */\nexport const paperStyle = (theme: Theme) => ({\n  paddingTop: theme.spacing(1),\n  paddingBottom: theme.spacing(1),\n  paddingLeft: theme.spacing(2),\n  paddingRight: theme.spacing(2),\n});\n\n/**\n * Makes style for Forms across the App\n */\nexport const formStyle = (theme: Theme) => ({\n  width: '100%',\n  maxWidth: '40rem', // 640px\n});\n\n/**\n * Makes style to use with Material UI dialogs across the App\n */\nexport const dialogStyles = (\n  theme: Theme\n): { xButton: any; paper: any; formControl: any; content: any; actions: any } => ({\n  xButton: {\n    position: 'absolute',\n    right: theme.spacing(0.5),\n    top: theme.spacing(0.5),\n  },\n  paper: {\n    [theme.breakpoints.up('md')]: {\n      minWidth: theme.breakpoints.values.md / 2,\n    },\n    [theme.breakpoints.down('md')]: {\n      minWidth: theme.breakpoints.values.sm / 2,\n    },\n  },\n  formControl: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  content: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  actions: {\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  },\n});\n\n/**\n * Makes \"filled\" styles for Material UI names 'primary', 'secondary', 'warning', and so on\n */\nexport const filledStylesByNames = (theme: Theme) => ({\n  // Standard MUI names\n  default: {\n    // MUI 5.x removes 'default' color from Button, we need to fix this\n    backgroundColor: theme.palette.grey[300],\n    color: 'rgba(0, 0, 0, 0.87)', // Value as theme.palette.text.primary in Light Mode\n  },\n  primary: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n  },\n  secondary: {\n    backgroundColor: theme.palette.secondary.main,\n    color: theme.palette.secondary.contrastText,\n  },\n  error: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n  warning: {\n    backgroundColor: theme.palette.warning.main,\n    color: theme.palette.warning.contrastText,\n  },\n  info: {\n    backgroundColor: theme.palette.info.main,\n    color: theme.palette.info.contrastText,\n  },\n  success: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n  },\n  // Boolean\n  false: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n  true: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n  },\n});\n\n/**\n * Makes \"text\" styles for Material UI names 'primary', 'secondary', 'warning', etc.\n * Also adds 'true' and 'false' classes\n */\nexport const textStylesByNames = (theme: Theme) => ({\n  // Standard MUI names\n  default: {},\n  primary: {\n    color: theme.palette.primary.main,\n  },\n  secondary: {\n    color: theme.palette.secondary.main,\n  },\n  error: {\n    color: theme.palette.error.main,\n  },\n  warning: {\n    color: theme.palette.warning.main,\n  },\n  info: {\n    color: theme.palette.info.main,\n  },\n  success: {\n    color: theme.palette.success.main,\n  },\n  // Boolean\n  false: {\n    color: theme.palette.error.main,\n  },\n  true: {\n    color: theme.palette.success.main,\n  },\n});\n\n/**\n * Makes \"filled\" + \"hover\" (like in Buttons) styles for Material UI names 'primary', 'secondary', 'warning', and so on\n * Note: Fully compatible with variant=\"contained\" only\n */\nexport const buttonStylesByNames = (theme: Theme) => ({\n  // Standard MUI names\n  default: {\n    // MUI 5.x removes 'default' color from Button, we need to fix this\n    backgroundColor: theme.palette.grey[300],\n    color: 'rgba(0, 0, 0, 0.87)', // Value as theme.palette.text.primary in Light Mode\n    '&:hover': {\n      backgroundColor: theme.palette.grey[400], // It was '#d5d5d5' in MUI 4.x\n      color: 'rgba(0, 0, 0, 0.87)', // Value as theme.palette.text.primary in Light Mode\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.grey[300], // In live MUI 4.x project lite: rgba(0, 0, 0, 0.12) dark: rgba(255, 255, 255, 0.12)\n      color: 'rgba(0, 0, 0, 0.26)', // In live MUI 4.x project lite: rgba(0, 0, 0, 0.26) dark: rgba(255, 255, 255, 0.3)\n    },\n  },\n  primary: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n      color: theme.palette.primary.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.primary.light,\n    },\n  },\n  secondary: {\n    backgroundColor: theme.palette.secondary.main,\n    color: theme.palette.secondary.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.dark,\n      color: theme.palette.secondary.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.secondary.light,\n    },\n  },\n  error: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.error.dark,\n      color: theme.palette.error.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.error.light,\n    },\n  },\n  warning: {\n    backgroundColor: theme.palette.warning.main,\n    color: theme.palette.warning.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.warning.dark,\n      color: theme.palette.warning.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.warning.light,\n    },\n  },\n  info: {\n    backgroundColor: theme.palette.info.main,\n    color: theme.palette.info.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.info.dark,\n      color: theme.palette.info.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.info.light,\n    },\n  },\n  success: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.success.dark,\n      color: theme.palette.success.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.success.light,\n    },\n  },\n  // Boolean\n  false: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.error.dark,\n      color: theme.palette.error.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.error.light,\n    },\n  },\n  true: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.success.dark,\n      color: theme.palette.success.contrastText,\n    },\n    '&:disabled': {\n      backgroundColor: theme.palette.success.light,\n    },\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/text.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":12,"column":34,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const CHARS_NUMERIC = '0123456789';\nexport const CHARS_ALPHA_LOWER = 'abcdefghijklmnopqrstuvwxyz';\nexport const CHARS_ALPHA_UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const CHARS_ALPHA_NUMERIC = CHARS_NUMERIC + CHARS_ALPHA_LOWER + CHARS_ALPHA_UPPER;\n\n/**\n * Generate a random string of a given length using a given set of characters\n * @param {number} length - the length of the string to generate\n * @param {string} [allowedChars] - the set of characters to use in the string, defaults to all alphanumeric characters in upper and lower case + numbers\n * @returns {string} - the generated string\n */\nexport function randomText(length: number, allowedChars = CHARS_ALPHA_NUMERIC) {\n  let result = '';\n  const charLength = allowedChars.length;\n  let counter = 0;\n  while (counter < length) {\n    result += allowedChars.charAt(Math.floor(Math.random() * charLength));\n    counter += 1;\n  }\n  return result;\n}\n/**\n * Compare two strings including null and undefined values\n * @param {string} a - the first string to compare\n * @param {string} b - the second string to compare\n * @returns {boolean} - true if the strings are the same or both null or undefined, false otherwise\n */\nexport function compareTexts(a: string | null | undefined, b: string | null | undefined) {\n  if (a === undefined || a === null || a === '') {\n    return b === undefined || b === null || b === '';\n  }\n  return a === b;\n}\n\n/**\n * Capitalize the first letter of a string\n * @param {string} s - the string to capitalize\n * @returns {string} - the capitalized string\n */\nexport const capitalize = (s: string): string => s.charAt(0).toUpperCase() + s.substring(1);\n\n/**\n * Generate a random color as #RRGGBB value\n * @returns {string} - the generated color\n */\nexport function randomColor() {\n  const color = Math.floor(Math.random() * 16777215).toString(16);\n  return '#' + color;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/utils/type.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token type","line":2,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Helper to read object's properties as obj['name']\nexport type ObjectPropByName = Record<string, any>;\n\n/**\n * Data for \"Page Link\" in SideBar adn other UI elements\n */\nexport type LinkToPage = {\n  icon?: string; // Icon name to use as <AppIcon icon={icon} />\n  path?: string; // URL to navigate to\n  title?: string; // Title or primary text to display\n  subtitle?: string; // Sub-title or secondary text to display\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/About/AboutView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":12,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardActions, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\nimport { AppButton, AppLink, AppIconButton, AppView } from '../../components';\nimport DialogsSection from './DialogsSection';\n\n/**\n * Renders \"About\" view\n * url: /about\n * @page About\n */\nconst AboutView = () => {\n  return (\n    <AppView>\n      <Grid item xs={12} md={3}>\n        <Card>\n          <CardHeader title=\"Application title here...\" subheader=\"Version 0.1\" />\n          <CardContent>Detailed description of the application here...</CardContent>\n          <CardActions>\n            <AppButton to=\"/\" color=\"primary\">\n              OK\n            </AppButton>\n          </CardActions>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12} md={3}>\n        <DialogsSection />\n      </Grid>\n\n      <Grid item xs={12} md={6}>\n        <Card>\n          <CardHeader title=\"AppLink\" />\n          <CardContent>\n            <AppLink>MUI default</AppLink> <AppLink color=\"inherit\">MUI inherit</AppLink>{' '}\n            <AppLink color=\"primary\">MUI primary</AppLink> <AppLink color=\"secondary\">MUI secondary</AppLink>{' '}\n            <AppLink color=\"textPrimary\">MUI textPrimary</AppLink>{' '}\n            <AppLink color=\"textSecondary\">MUI textSecondary</AppLink> <AppLink color=\"error\">MUI error</AppLink> <br />\n            <AppLink to=\"/\">Internal Link</AppLink> &nbsp;\n            <AppLink to=\"/\" openInNewTab>\n              Internal Link in New Tab\n            </AppLink>{' '}\n            &nbsp;\n            <AppLink href=\"//karpolan.com\">External Link</AppLink> &nbsp;\n            <AppLink href=\"//karpolan.com\" openInNewTab={false}>\n              External Link in Same Tab\n            </AppLink>{' '}\n            &nbsp;\n            <br />\n            <AppButton to=\"/\" sx={{ ml: 0 }} size=\"small\" label=\"as Default Button\" />\n            <AppButton to=\"/\" size=\"small\" color=\"primary\" label=\"as Primary Button\" />\n            <AppButton to=\"/\" sx={{ mr: 0 }} size=\"small\" color=\"secondary\" label=\"as Secondary Button\" />\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12} md={6}>\n        <Card>\n          <CardHeader title=\"AppButton\" />\n          <CardContent>\n            <AppButton sx={{ ml: 0 }}>Default</AppButton>\n            <AppButton disabled>Disabled</AppButton>\n            <AppButton color=\"primary\">Primary</AppButton>\n            <AppButton color=\"secondary\">Secondary</AppButton>\n            <AppButton color=\"error\">Error</AppButton>\n            <AppButton color=\"warning\">Warning</AppButton>\n            <AppButton color=\"info\">Info</AppButton>\n            <AppButton color=\"success\">Success</AppButton>\n            <AppButton color=\"#FF8C00\">#FF8C00</AppButton>\n            <AppButton color=\"rgb(50, 205, 50)\">rgb(50, 205, 50)</AppButton>\n            <AppButton color=\"inherit\" sx={{ mr: 0 }}>\n              Inherit\n            </AppButton>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12} md={6}>\n        <Card>\n          <CardHeader title=\"AppIconButton\" />\n          <CardContent>\n            <AppIconButton title=\"Default icon, no color specified\" />\n            <AppIconButton icon=\"close\" color=\"primary\" title=\"Close icon with Primary color\" />\n            <AppIconButton icon=\"menu\" color=\"secondary\" title=\"Menu icon with Secondary color\" />\n            <AppIconButton icon=\"settings\" color=\"error\" title=\"Settings icon with Error color\" />\n            <AppIconButton icon=\"search\" color=\"warning\" title=\"Search icon with Warning color\" />\n            <AppIconButton icon=\"info\" color=\"info\" title=\"Info icon with Info color\" />\n            <AppIconButton icon=\"home\" color=\"success\" title=\"Home icon with Success color\" />\n            <AppIconButton\n              icon=\"visibilityoff\"\n              color=\"#FF8C00\"\n              title=\"VisibilityOff icon with DarkOrange (#FF8C00) color\"\n            />\n            <AppIconButton\n              icon=\"visibilityon\"\n              color=\"rgb(50, 205, 50)\"\n              title=\"VisibilityOn icon with LimeGreen (rgb(50, 205, 50)) color\"\n            />\n            <AppIconButton icon=\"account\" color=\"inherit\" title=\"Account icon with Inherit color\" />\n            {/* <AppIconButton icon=\"close\" color=\"primary\" disabled title=\"Disabled Close icon with Primary color\" /> */}\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h1\">MUI Typo h1</Typography>\n            <Typography variant=\"h2\">MUI Typography h2</Typography>\n            <Typography variant=\"h3\">MUI Typography h3</Typography>\n            <Typography variant=\"h4\">MUI Typography h4</Typography>\n            <Typography variant=\"h5\">MUI Typography h5</Typography>\n            <Typography variant=\"h6\">MUI Typography h6</Typography>\n            <Divider />\n            <Typography variant=\"subtitle1\">MUI Typography subtitle1</Typography>\n            <Typography variant=\"subtitle2\">MUI Typography subtitle2</Typography>\n            <Typography variant=\"caption\">MUI Typography caption</Typography>\n            <Divider />\n            <Typography variant=\"body1\">\n              MUI Typography body1 - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n              incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n              laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit\n              esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n              qui officia deserunt mollit anim id est laborum.\n            </Typography>\n            <Divider />\n            <Typography variant=\"body2\">\n              MUI Typography body2 - Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n              incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n              laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit\n              esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n              qui officia deserunt mollit anim id est laborum.\n            </Typography>\n            <Divider />\n            <Typography variant=\"overline\">MUI Typography overline</Typography>\n            <Divider />\n            <Typography variant=\"button\">MUI Typography button</Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    </AppView>\n  );\n};\n\nexport default AboutView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/About/DialogsSection.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":22,"column":51,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChangeEvent, useState, ReactNode, useCallback } from 'react';\nimport { Card, CardHeader, Grid, TextField } from '@mui/material';\nimport { AppButton, AppIconButton } from '../../components';\nimport {\n  CommonDialog as MessageDialog,\n  CommonDialog as ConfirmationDialog,\n  CompositionDialog as EmailEditDialog,\n} from '../../components/dialogs';\n\n/**\n * Renders demo section for Dialogs\n */\nconst DialogsSection = () => {\n  const [modal, setModal] = useState<ReactNode | null>(null);\n  const [openEmailDialog, setOpenEmailDialog] = useState(false);\n  const [email, setEmail] = useState('i@karpolan.com');\n\n  const onDialogClose = useCallback(() => {\n    setModal(null);\n  }, []);\n\n  const onMessageDialogConfirm = useCallback((data: unknown) => {\n    console.info('onMessageDialogConfirm() - data:', data);\n    setModal(null);\n  }, []);\n\n  const onMessageDialogOpen = () => {\n    setModal(\n      <MessageDialog\n        open\n        hideCancelButton\n        confirmButtonText=\"OK\"\n        data=\"Dialog Data can be object, string, number, boolean, etc. It is passed to onConfirm callback\"\n        title=\"Simple Message\"\n        text={`Use props.text to pass string message here. \n\t\t\t         If you need to render JSX content inside the dialog use props.body. \n\t\t\t         Text and color of the \"Confirm\" button is customizable.\n\t\t\t\t\t     The \"Cancel\" button can be hidden`}\n        onClose={onDialogClose}\n        onConfirm={onMessageDialogConfirm}\n      />\n    );\n  };\n\n  const onConfirmDialogConfirm = useCallback((data: unknown) => {\n    console.info('onConfirmDialogConfirm() - data:', data);\n    setModal(null);\n  }, []);\n\n  const onConfirmDialogOpen = () => {\n    const dialogData = {\n      id: 123,\n      name: 'Sample data for Confirm Dialog',\n    };\n    setModal(\n      <ConfirmationDialog\n        open\n        data={dialogData}\n        title=\"Do you really want to do something?\"\n        body={\n          <>\n            <div>JSX content can be easily added into the dialog via props.body</div>\n            <br />\n            <AppIconButton title=\"Default icon, no color specified\" />\n            <AppIconButton icon=\"close\" color=\"primary\" title=\"Close icon with Primary color\" />\n            <AppIconButton icon=\"menu\" color=\"secondary\" title=\"Menu icon with Secondary color\" />\n            <AppIconButton icon=\"settings\" color=\"error\" title=\"Settings icon with Error color\" />\n            <AppIconButton icon=\"search\" color=\"warning\" title=\"Search icon with Warning color\" />\n            <AppIconButton icon=\"info\" color=\"info\" title=\"Info icon with Info color\" />\n            <AppIconButton icon=\"home\" color=\"success\" title=\"Home icon with Success color\" />\n            <AppIconButton\n              icon=\"visibilityoff\"\n              color=\"#FF8C00\"\n              title=\"VisibilityOff icon with DarkOrange (#FF8C00) color\"\n            />\n            <AppIconButton\n              icon=\"visibilityon\"\n              color=\"rgb(50, 205, 50)\"\n              title=\"VisibilityOn icon with LimeGreen (rgb(50, 205, 50)) color\"\n            />\n            <AppIconButton icon=\"account\" color=\"inherit\" title=\"Account icon with Inherit color\" />\n            {/* <AppIconButton icon=\"close\" color=\"primary\" disabled title=\"Disabled Close icon with Primary color\" /> */}\n            <br />\n            <br />\n            <div>\n              The props.body takes precedence over props.text. So JSX content is rendered, but the text is ignored\n            </div>\n          </>\n        }\n        text=\"!!! This text will not be rendered !!!\"\n        confirmButtonText=\"Confirm and do something\"\n        onClose={onDialogClose}\n        onConfirm={onConfirmDialogConfirm}\n      />\n    );\n  };\n\n  const onEditEmailDialogClose = useCallback((data: unknown) => {\n    setOpenEmailDialog(false);\n  }, []);\n\n  const onEmailChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const onEditEmailDialogOpen = () => {\n    setOpenEmailDialog(true);\n  };\n\n  return (\n    <>\n      {modal}\n      {openEmailDialog && (\n        <EmailEditDialog\n          open\n          title=\"Edit Email\"\n          onClose={onEditEmailDialogClose}\n          content={\n            <div>\n              <TextField variant=\"outlined\" label=\"Email address\" fullWidth value={email} onChange={onEmailChange} />\n              <p>This is CompositionDialog with JSX in props.content and props.actions</p>\n            </div>\n          }\n          actions={\n            <>\n              <AppButton onClick={onEditEmailDialogClose}>Cancel</AppButton>\n              <AppButton sx={{ mr: 0 }} color=\"success\" onClick={onEditEmailDialogClose}>\n                OK\n              </AppButton>\n            </>\n          }\n        />\n      )}\n\n      <Card>\n        <CardHeader title=\"Dialogs\" />\n        <Grid container direction=\"column\" alignItems=\"center\">\n          <AppButton size=\"small\" label=\"Simple Message\" color=\"default\" onClick={onMessageDialogOpen} />\n          <AppButton size=\"small\" label=\"Confirmation Dialog\" color=\"primary\" onClick={onConfirmDialogOpen} />\n          <AppButton\n            size=\"small\"\n            label=\"Edit Email - Composition Dialog\"\n            color=\"secondary\"\n            onClick={onEditEmailDialogOpen}\n          />\n          <br />\n        </Grid>\n      </Card>\n    </>\n  );\n};\n\nexport default DialogsSection;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/About/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/Login/LoginEmailView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":23,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SyntheticEvent, useCallback, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Grid, TextField, Card, CardHeader, CardContent, InputAdornment } from '@mui/material';\nimport { useAppStore } from '../../../store';\nimport { AppButton, AppLink, AppIconButton, AppAlert, AppForm } from '../../../components';\nimport { useAppForm, SHARED_CONTROL_PROPS, eventPreventDefault } from '../../../utils/form';\n\nconst VALIDATE_FORM_LOGIN_EMAIL = {\n  email: {\n    presence: true,\n    email: true,\n  },\n  password: {\n    presence: true,\n    length: {\n      minimum: 8,\n      maximum: 32,\n      message: 'must be between 8 and 32 characters',\n    },\n  },\n};\n\ninterface FormStateValues {\n  email: string;\n  password: string;\n}\n\n/**\n * Renders \"Login with Email\" view for Login flow\n * url: /auth/login/email\n * @page LoginEmail\n */\nconst LoginEmailView = () => {\n  const navigate = useNavigate();\n  const [, dispatch] = useAppStore();\n  const { formState, onFieldChange, fieldGetError, fieldHasError, isFormValid } = useAppForm({\n    validationSchema: VALIDATE_FORM_LOGIN_EMAIL,\n    initialValues: { email: '', password: '' } as FormStateValues,\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState<string>();\n  const values = formState.values as FormStateValues; // Typed alias to formState.values as the \"Source of Truth\"\n\n  const handleShowPasswordClick = useCallback(() => {\n    setShowPassword((oldValue) => !oldValue);\n  }, []);\n\n  const handleFormSubmit = useCallback(\n    async (event: SyntheticEvent) => {\n      event.preventDefault();\n\n      const result = true; // await api.auth.loginWithEmail(values);\n      if (!result) {\n        setError('Please check email and password');\n        return;\n      }\n\n      dispatch({ type: 'LOG_IN' });\n      navigate('/', { replace: true });\n    },\n    [dispatch, /*values,*/ navigate]\n  );\n\n  const handleCloseError = useCallback(() => setError(undefined), []);\n\n  return (\n    <AppForm onSubmit={handleFormSubmit}>\n      <Card>\n        <CardHeader title=\"Login with Email\" />\n        <CardContent>\n          <TextField\n            required\n            label=\"Email\"\n            name=\"email\"\n            value={values.email}\n            error={fieldHasError('email')}\n            helperText={fieldGetError('email') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n          />\n          <TextField\n            required\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            name=\"password\"\n            value={values.password}\n            error={fieldHasError('password')}\n            helperText={fieldGetError('password') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <AppIconButton\n                    aria-label=\"toggle password visibility\"\n                    icon={showPassword ? 'visibilityon' : 'visibilityoff'}\n                    title={showPassword ? 'Hide Password' : 'Show Password'}\n                    onClick={handleShowPasswordClick}\n                    onMouseDown={eventPreventDefault}\n                  />\n                </InputAdornment>\n              ),\n            }}\n          />\n          {error ? (\n            <AppAlert severity=\"error\" onClose={handleCloseError}>\n              {error}\n            </AppAlert>\n          ) : null}\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <AppButton type=\"submit\" disabled={!isFormValid()}>\n              Login with Email\n            </AppButton>\n            <Button variant=\"text\" color=\"inherit\" component={AppLink} to=\"/auth/recovery/password\">\n              Forgot Password\n            </Button>\n          </Grid>\n        </CardContent>\n      </Card>\n    </AppForm>\n  );\n};\n\nexport default LoginEmailView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/Login/index.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":11,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Route, Routes } from 'react-router-dom';\nimport { NotFoundView } from '../..';\nimport LoginEmailView from './LoginEmailView';\n\n/**\n * Routes for \"Login\" flow\n * url: /auth/login/*\n */\nconst LoginRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<LoginEmailView />} />\n      <Route path=\"email\" element={<LoginEmailView />} />\n      <Route path=\"*\" element={<NotFoundView />} />\n    </Routes>\n  );\n};\n\nexport default LoginRoutes;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/Recovery/RecoveryPasswordView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":13,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SyntheticEvent, useCallback, useState } from 'react';\nimport { Grid, TextField, Card, CardHeader, CardContent } from '@mui/material';\nimport { AppButton, AppAlert, AppForm } from '../../../components';\nimport { useAppForm, SHARED_CONTROL_PROPS } from '../../../utils/form';\n\nconst VALIDATE_FORM_RECOVERY_PASSWORD = {\n  email: {\n    presence: true,\n    email: true,\n  },\n};\n\ninterface FormStateValues {\n  email: string;\n}\n\ninterface Props {\n  email?: string;\n}\n\n/**\n * Renders \"Recover Password\" view for Login flow\n * url: /uth/recovery/password\n * @page RecoveryPassword\n * @param {string} [props.email] - pre-populated email in case the user already enters it\n */\nconst RecoveryPasswordView = ({ email = '' }: Props) => {\n  const { formState, onFieldChange, fieldGetError, fieldHasError, isFormValid } = useAppForm({\n    validationSchema: VALIDATE_FORM_RECOVERY_PASSWORD,\n    initialValues: { email } as FormStateValues,\n  });\n  const [message, setMessage] = useState<string>();\n  const values = formState.values as FormStateValues; // Typed alias to formState.values as the \"Source of Truth\"\n\n  const handleFormSubmit = async (event: SyntheticEvent) => {\n    event.preventDefault();\n\n    // await api.auth.recoverPassword(values);\n\n    //Show message with instructions for the user\n    setMessage('Email with instructions has been sent to your address');\n  };\n\n  const handleCloseError = useCallback(() => setMessage(undefined), []);\n\n  return (\n    <AppForm onSubmit={handleFormSubmit}>\n      <Card>\n        <CardHeader title=\"Recover Password\" />\n        <CardContent>\n          <TextField\n            required\n            label=\"Email\"\n            name=\"email\"\n            value={values.email}\n            error={fieldHasError('email')}\n            helperText={fieldGetError('email') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n          />\n\n          {message ? (\n            <AppAlert severity=\"success\" onClose={handleCloseError}>\n              {message}\n            </AppAlert>\n          ) : null}\n\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <AppButton type=\"submit\" disabled={!isFormValid()}>\n              Send Password Recovery Email\n            </AppButton>\n          </Grid>\n        </CardContent>\n      </Card>\n    </AppForm>\n  );\n};\n\nexport default RecoveryPasswordView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/Recovery/index.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":11,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Route, Routes } from 'react-router-dom';\nimport { NotFoundView } from '../..';\nimport RecoveryPasswordView from './RecoveryPasswordView';\n\n/**\n * Routes for \"Recovery\" flow\n * url: /auth/recovery/*\n */\nconst RecoveryRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<RecoveryPasswordView />} />\n      <Route path=\"password\" element={<RecoveryPasswordView />} />\n      <Route path=\"*\" element={<NotFoundView />} />\n    </Routes>\n  );\n};\n\nexport default RecoveryRoutes;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/Signup/ConfirmEmailView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token )","line":16,"column":46,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Card, CardHeader, CardContent, TextField } from '@mui/material';\nimport { SHARED_CONTROL_PROPS } from '../../../utils/form';\nimport { AppAlert, AppForm } from '../../../components';\n\nconst TOKEN_QUERY_PARAM = 'token';\n\n/**\n * Renders \"Confirm Email\" view for Signup flow\n * url: /auth/signup/confirm-email\n * @page ConfirmEmail\n */\nconst ConfirmEmailView = () => {\n  const [email, setEmail] = useState<string>('');\n  const [error, setError] = useState<string>();\n\n  function useQuery() {\n    return new URLSearchParams(useLocation().search);\n  }\n\n  const token = useQuery().get(TOKEN_QUERY_PARAM) || '';\n  console.log('ConfirmEmailView() - token:', token);\n\n  useEffect(() => {\n    // Component Mount\n    let componentMounted = true;\n\n    async function fetchData() {\n      //TODO: Call any Async API here\n      if (!componentMounted) return; // Component was unmounted during the API call\n      //TODO: Verify API call here\n\n      setEmail('example@domain.com');\n    }\n    fetchData(); // Call API asynchronously\n\n    return () => {\n      // Component Un-mount\n      componentMounted = false;\n    };\n  }, []);\n\n  const handleCloseError = useCallback(() => setError(undefined), []);\n\n  return (\n    <AppForm>\n      <Card>\n        <CardHeader title=\"Email Confirmation\" />\n        <CardContent>\n          <TextField disabled label=\"Email\" name=\"email\" value={email} helperText=\" \" {...SHARED_CONTROL_PROPS} />\n          {error ? (\n            <AppAlert severity=\"error\" onClose={handleCloseError}>\n              {error}\n            </AppAlert>\n          ) : null}\n        </CardContent>\n      </Card>\n    </AppForm>\n  );\n};\n\nexport default ConfirmEmailView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/Signup/SignupView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":66,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SyntheticEvent, useCallback, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Grid,\n  TextField,\n  Card,\n  CardHeader,\n  CardContent,\n  Checkbox,\n  FormControlLabel,\n  InputAdornment,\n  LinearProgress,\n} from '@mui/material';\nimport { useAppStore } from '../../../store';\nimport { AppButton, AppIconButton, AppAlert, AppForm } from '../../../components';\nimport { useAppForm, SHARED_CONTROL_PROPS, eventPreventDefault } from '../../../utils/form';\n\nconst VALIDATE_FORM_SIGNUP = {\n  email: {\n    email: true,\n    presence: true,\n  },\n  phone: {\n    type: 'string',\n    format: {\n      pattern: '^$|[- .+()0-9]+', // Note: We have to allow empty in the pattern\n      message: 'should contain numbers',\n    },\n    // length: {\n    // \tis: 10,\n    // \tmessage: 'must be exactly 10 digits',\n    // },\n  },\n  firstName: {\n    type: 'string',\n    presence: { allowEmpty: false },\n    format: {\n      pattern: '^[A-Za-z ]+$', // Note: Allow only alphabets and space\n      message: 'should contain only alphabets',\n    },\n  },\n  lastName: {\n    type: 'string',\n    presence: { allowEmpty: false },\n    format: {\n      pattern: '^[A-Za-z ]+$', // Note: Allow only alphabets and space\n      message: 'should contain only alphabets',\n    },\n  },\n  password: {\n    presence: true,\n    length: {\n      minimum: 8,\n      maximum: 32,\n      message: 'must be between 8 and 32 characters',\n    },\n  },\n};\n\nconst VALIDATE_EXTENSION = {\n  confirmPassword: {\n    equality: 'password',\n  },\n};\n\ninterface FormStateValues {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  password: string;\n  confirmPassword?: string;\n}\n\n/**\n * Renders \"Signup\" view\n * url: /auth/signup\n * @page Signup\n */\nconst SignupView = () => {\n  const navigate = useNavigate();\n  const [, dispatch] = useAppStore();\n  const [validationSchema, setValidationSchema] = useState<any>({\n    ...VALIDATE_FORM_SIGNUP,\n    ...VALIDATE_EXTENSION,\n  });\n  const { formState, onFieldChange, fieldGetError, fieldHasError, isFormValid } = useAppForm({\n    validationSchema: validationSchema, // the state value, so could be changed in time\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      password: '',\n      confirmPassword: '',\n    } as FormStateValues,\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [agree, setAgree] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>();\n  const values = formState.values as FormStateValues; // Typed alias to formState.values as the \"Source of Truth\"\n\n  useEffect(() => {\n    // Component Mount\n    let componentMounted = true;\n\n    async function fetchData() {\n      //TODO: Call any Async API here\n      if (!componentMounted) return; // Component was unmounted during the API call\n      //TODO: Verify API call here\n\n      setLoading(false); // Reset \"Loading...\" indicator\n    }\n    fetchData(); // Call API asynchronously\n\n    return () => {\n      // Component Un-mount\n      componentMounted = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    // Update Validation Schema when Show/Hide password changed\n    let newSchema;\n    if (showPassword) {\n      newSchema = VALIDATE_FORM_SIGNUP; // Validation without .confirmPassword\n    } else {\n      newSchema = { ...VALIDATE_FORM_SIGNUP, ...VALIDATE_EXTENSION }; // Full validation\n    }\n    setValidationSchema(newSchema);\n  }, [showPassword]);\n\n  const handleShowPasswordClick = useCallback(() => {\n    setShowPassword((oldValue) => !oldValue);\n  }, []);\n\n  const handleAgreeClick = useCallback(() => {\n    setAgree((oldValue) => !oldValue);\n  }, []);\n\n  const handleFormSubmit = useCallback(\n    async (event: SyntheticEvent) => {\n      event.preventDefault();\n\n      const apiResult = true; // await api.auth.signup(values);\n\n      if (!apiResult) {\n        setError('Can not create user for given email, if you already have account please sign in');\n        return; // Unsuccessful signup\n      }\n\n      dispatch({ type: 'SIGN_UP' });\n      return navigate('/', { replace: true });\n    },\n    [dispatch, /*values,*/ navigate]\n  );\n\n  const handleCloseError = useCallback(() => setError(undefined), []);\n\n  if (loading) return <LinearProgress />;\n\n  return (\n    <AppForm onSubmit={handleFormSubmit}>\n      <Card>\n        <CardHeader title=\"Sign Up\" />\n        <CardContent>\n          <TextField\n            required\n            label=\"Email\"\n            name=\"email\"\n            value={values.email}\n            error={fieldHasError('email')}\n            helperText={fieldGetError('email') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n          />\n          <TextField\n            required\n            label=\"Phone\"\n            name=\"phone\"\n            value={values.phone}\n            error={fieldHasError('phone')}\n            helperText={fieldGetError('phone') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n          />\n          <TextField\n            required\n            label=\"First Name\"\n            name=\"firstName\"\n            value={values.firstName}\n            error={fieldHasError('firstName')}\n            helperText={fieldGetError('firstName') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n          />\n          <TextField\n            required\n            label=\"Last Name\"\n            name=\"lastName\"\n            value={values.lastName}\n            error={fieldHasError('lastName')}\n            helperText={fieldGetError('lastName') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n          />\n          <TextField\n            required\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            name=\"password\"\n            value={values.password}\n            error={fieldHasError('password')}\n            helperText={fieldGetError('password') || ' '}\n            onChange={onFieldChange}\n            {...SHARED_CONTROL_PROPS}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <AppIconButton\n                    aria-label=\"toggle password visibility\"\n                    icon={showPassword ? 'visibilityon' : 'visibilityoff'}\n                    title={showPassword ? 'Hide Password' : 'Show Password'}\n                    onClick={handleShowPasswordClick}\n                    onMouseDown={eventPreventDefault}\n                  />\n                </InputAdornment>\n              ),\n            }}\n          />\n          {!showPassword && (\n            <TextField\n              required\n              type=\"password\"\n              label=\"Confirm Password\"\n              name=\"confirmPassword\"\n              value={values.confirmPassword}\n              error={fieldHasError('confirmPassword')}\n              helperText={fieldGetError('confirmPassword') || ' '}\n              onChange={onFieldChange}\n              {...SHARED_CONTROL_PROPS}\n            />\n          )}\n          <FormControlLabel\n            control={<Checkbox required name=\"agree\" checked={agree} onChange={handleAgreeClick} />}\n            label=\"You must agree with Terms of Use and Privacy Policy to use our service\"\n          />\n\n          {error ? (\n            <AppAlert severity=\"error\" onClose={handleCloseError}>\n              {error}\n            </AppAlert>\n          ) : null}\n\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <AppButton type=\"submit\" disabled={!(isFormValid() && agree)}>\n              Confirm and Sign Up\n            </AppButton>\n          </Grid>\n        </CardContent>\n      </Card>\n    </AppForm>\n  );\n};\n\nexport default SignupView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/Signup/index.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":12,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Route, Routes } from 'react-router-dom';\nimport { NotFoundView } from '../..';\nimport SignupView from './SignupView';\nimport ConfirmEmailView from './ConfirmEmailView';\n\n/**\n * Routes for \"Signup\" flow\n * url: /auth/signup/*\n */\nconst SignupRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<SignupView />} />\n      <Route path=\"confirm-email\" element={<ConfirmEmailView />} />\n      <Route path=\"*\" element={<NotFoundView />} />\n    </Routes>\n  );\n};\n\nexport default SignupRoutes;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Auth/index.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":13,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Route, Routes } from 'react-router-dom';\nimport { NotFoundView } from '..';\nimport SignupRoutes from './Signup';\nimport LoginRoutes from './Login';\nimport RecoveryRoutes from './Recovery';\n\n/**\n * Routes for \"Auth\" flow\n * url: /auth/*\n */\nconst AuthRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<LoginRoutes />} />\n      <Route path=\"signup/*\" element={<SignupRoutes />} />\n      <Route path=\"login/*\" element={<LoginRoutes />} />\n      <Route path=\"recovery/*\" element={<RecoveryRoutes />} />\n      <Route path=\"*\" element={<NotFoundView />} />\n    </Routes>\n  );\n};\n\nexport default AuthRoutes;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Dev/DevView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":11,"column":10,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppView } from '../../components';\n\n/**\n * Renders Development tools when env.REACT_APP_DEBUG is true\n * url: /dev\n * @page Dev\n */\nconst DevView = () => {\n  if (process.env.REACT_APP_DEBUG !== 'true') return null; // Hide this page on when env.REACT_APP_DEBUG is not set\n\n  return <AppView>Debug controls and components on this page...</AppView>;\n};\n\nexport default DevView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Dev/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/NotFoundView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":18,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useNavigate } from 'react-router-dom';\nimport { Stack, Typography } from '@mui/material';\nimport { AppAlert, AppButton, AppLink, AppView } from '../components';\n\n/**\n * \"Not Found\" aka \"Error 404\" view\n * url: any unknown :)\n * @page NotFoundView\n */\nconst NotFoundView = () => {\n  const navigate = useNavigate();\n\n  const onClose = () => {\n    navigate('/', { replace: true });\n  };\n\n  return (\n    <AppView>\n      <Typography variant=\"h3\">Page not found!</Typography>\n      <Typography variant=\"body1\">\n        Requested address is unknown, please check your URL or go to the <AppLink to=\"/\">home page</AppLink>.\n      </Typography>\n      <AppAlert severity=\"error\" onClose={onClose}>\n        Error 404 - Page not found\n      </AppAlert>\n      <Stack direction=\"row\" justifyContent=\"center\">\n        <AppButton onClick={onClose}>Go to Home Page</AppButton>\n      </Stack>\n    </AppView>\n  );\n};\n\nexport default NotFoundView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/NotImplementedView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: The keyword 'interface' is reserved","line":4,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FunctionComponent } from 'react';\nimport { Link, useLocation, useParams } from 'react-router-dom';\n\ninterface Props {\n  name?: string;\n}\n\n/**\n * Boilerplate for non-implemented Views\n */\nconst NotImplementedView: FunctionComponent<Props> = ({ name }) => {\n  const location = useLocation();\n  const { id: paramId } = useParams();\n  const componentName = name || 'View';\n\n  return (\n    <div>\n      <h1>{componentName} is under construction</h1>\n      <p>\n        This view is not implemented yet. Go to <Link to=\"/\">home page</Link>\n      </p>\n      <p>\n        You've called the <b>{location?.pathname}</b> url\n        {paramId && (\n          <span>\n            {' '}\n            where <b>{paramId}</b> is a parameter\n          </span>\n        )}\n      </p>\n    </div>\n  );\n};\n\nexport default NotImplementedView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Welcome/WelcomeView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":11,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Typography } from '@mui/material';\nimport { AppLink, AppView } from '../../components';\n\n/**\n * Renders \"Welcome\" view\n * url: /\n * @page Welcome\n */\nconst WelcomeView = () => {\n  return (\n    <AppView>\n      <Typography variant=\"h4\">Welcome to React App with MUI</Typography>\n\n      <div>This is Welcome page, put your content here....</div>\n      <div>\n        Take a look on samples of components at <AppLink to=\"/about\">About Page</AppLink>\n      </div>\n    </AppView>\n  );\n};\n\nexport default WelcomeView;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/Welcome/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DevSecOps/DevSecOps/src/views/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]